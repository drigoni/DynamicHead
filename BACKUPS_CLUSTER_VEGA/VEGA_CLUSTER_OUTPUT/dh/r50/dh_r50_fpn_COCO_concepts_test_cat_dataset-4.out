
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
Date:  lun 7 nov 2022, 16.28.16, CET
Directory:  /ceph/hpc/home/eudavider/repository/DynamicHead
Nodelist:  login0006
Number of nodes:  1
Ntasks per node:  1
NGPUs per node:  1
CUDA_VISIBLE_DEVICES:  0
TORCH_DEVICE_COUNT:  1
SLURM_MASTER_PORT:  19937
SLURM_MASTER_NODE:  login0006
SLURM_MASTER_ADDR:  login0006
SLURM_MASTER_URL:  tcp://login0006:19937
--------------------------------------------- 
MODEL_NUM_GPUS:  1
MODEL_NUM_MACHINES:  1
MODEL_BATCH_SIZE:  5
MODEL_MAX_ITER:  576000
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 

srun: error: WARNING: Multiple leaf switches contain nodes: gn[01-60]
[nltk_data] Downloading package omw-1.4 to
[nltk_data]     /ceph/hpc/home/eudavider/nltk_data...
[nltk_data]   Package omw-1.4 is already up-to-date!
[nltk_data] Downloading package wordnet to
[nltk_data]     /ceph/hpc/home/eudavider/nltk_data...
[nltk_data]   Package wordnet is already up-to-date!
Loading config ./configs/COCO/dh/r50/../base_dh_COCO_concepts.yaml with yaml.unsafe_load. Your machine may be at risk if the file contains malicious content.
Command Line Args: Namespace(config_file='./configs/COCO/dh/r50/dh_r50_fpn_COCO_concepts_test_cat.yaml', resume=False, eval_only=True, num_gpus=1, num_machines=1, machine_rank=0, dist_url='tcp://login0006:19937', opts=['SOLVER.IMS_PER_BATCH', '5', 'SOLVER.MAX_ITER', '576000', 'DATASETS.TEST', '("coco_2017_val_subset_old",)', 'CONCEPT.APPLY_CONDITION', 'True', 'EVALUATOR_TYPE', 'default'])
[32m[11/07 16:28:44 detectron2]: [0mRank of current process: 0. World size: 1
[32m[11/07 16:28:45 detectron2]: [0mEnvironment info:
----------------------  ------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.13 | packaged by conda-forge | (main, May 27 2022, 16:56:21) [GCC 10.3.0]
numpy                   1.23.1
detectron2              0.6 @/ceph/hpc/home/eudavider/.local/lib/python3.9/site-packages/detectron2
Compiler                GCC 7.3
CUDA compiler           CUDA 11.3
detectron2 arch flags   3.7, 5.0, 5.2, 6.0, 6.1, 7.0, 7.5, 8.0, 8.6
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.10.0 @/ceph/hpc/home/eudavider/.conda/envs/dynamicHead/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   NVIDIA A100-PCIE-40GB (arch=8.0)
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.2.0
torchvision             0.11.0 @/ceph/hpc/home/eudavider/.conda/envs/dynamicHead/lib/python3.9/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     Not found
----------------------  ------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[32m[11/07 16:28:45 detectron2]: [0mCommand line arguments: Namespace(config_file='./configs/COCO/dh/r50/dh_r50_fpn_COCO_concepts_test_cat.yaml', resume=False, eval_only=True, num_gpus=1, num_machines=1, machine_rank=0, dist_url='tcp://login0006:19937', opts=['SOLVER.IMS_PER_BATCH', '5', 'SOLVER.MAX_ITER', '576000', 'DATASETS.TEST', '("coco_2017_val_subset_old",)', 'CONCEPT.APPLY_CONDITION', 'True', 'EVALUATOR_TYPE', 'default'])
[32m[11/07 16:28:45 detectron2]: [0mContents of args.config_file=./configs/COCO/dh/r50/dh_r50_fpn_COCO_concepts_test_cat.yaml:
_BASE_: "../base_dh_COCO_concepts.yaml"
MODEL:
  WEIGHTS: "./results/COCO/dh/dh_r50_fpn_COCO_concepts_cat/model_final.pth"
  BACKBONE:
    NAME: "build_retinanet_resnet_fpn_dyhead_backbone"
  RESNETS:
    DEPTH: 50
    OUT_FEATURES: ["res3", "res4", "res5"]
  FPN:
    IN_FEATURES: ["res3", "res4", "res5"]
  ATSS:
    NUM_CONVS: 2
CONCEPT:
  CONCEPT_FUSION: "cat" # ["cat", "mul", "add", "zeros"]
  APPLY_CONDITION: TRUE
  APPLY_CONDITION_FROM_FILE: FALSE
  ACTIVATE_CONCEPT_GENERATOR: FALSE
DATASETS:
  TRAIN: ("coco_2017_tuning_train",)
  TEST: ("coco_2017_tuning_val",)
DEEPSETS:
  EMB: "random"
OUTPUT_DIR: "./results/COCO/dh/dh_r50_fpn_COCO_concepts_cat/"
[32m[11/07 16:28:45 detectron2]: [0mRunning with full config:
CONCEPT:
  ACTIVATE_CONCEPT_GENERATOR: false
  APPLY_CONDITION: true
  APPLY_CONDITION_FROM_FILE: false
  CONCEPT_FUSION: cat
  DEPTH: 1
  EXTERNAL_CONCEPTS_FOLDER: ./datasets/ewiser_concepts_COCO_valid/
  FILE: ./concept/coco_to_synset.json
  ONLY_NAME: true
  UNIQUE: true
  VOCAB: ./concept/vocab.json
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 16
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - coco_2017_val_subset_old
  TRAIN:
  - coco_2017_tuning_train
DEEPSETS:
  AGGREGATE: sum
  EMB: random
  EMB_DIM: 150
  FILE: ./concept/wn30_holE_500_150_0.1_0.2_embeddings.pickle
  FREEZE: true
  MLP1_LAYERS:
  - 150
  - 150
  MLP1_OUTPUT_DIM: 150
  MLP2_LAYERS:
  - 150
  OUTPUT_DIM: 256
EVALUATOR_TYPE: default
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - 1.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.5
    SIZES:
    - - 64
    - - 128
    - - 256
    - - 512
    - - 1024
  ATSS:
    BBOX_REG_WEIGHTS:
    - 10.0
    - 10.0
    - 5.0
    - 5.0
    CHANNELS: 256
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    INFERENCE_TH: 0.05
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_TH: 0.6
    NUM_CLASSES: 80
    NUM_CONVS: 2
    PRE_NMS_TOP_N: 1000
    PRIOR_PROB: 0.01
    REG_LOSS_WEIGHT: 2.0
    TOPK: 9
    USE_GN: true
  BACKBONE:
    FREEZE_AT: -1
    NAME: build_retinanet_resnet_fpn_dyhead_backbone
  DEVICE: cuda
  DYHEAD:
    CHANNELS: 256
    NUM_CONVS: 6
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES:
    - res3
    - res4
    - res5
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: CATSS
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: true
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  SWINT:
    APE: false
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.2
    EMBED_DIM: 96
    MLP_RATIO: 4
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - stage3
    - stage4
    - stage5
    OUT_NORM: true
    VERSION: 1
    WINDOW_SIZE: 7
  WEIGHTS: ./results/COCO/dh/dh_r50_fpn_COCO_concepts_cat/model_final.pth
OUTPUT_DIR: ./results/COCO/dh/dh_r50_fpn_COCO_concepts_cat/
SEED: 2022
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.0001
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 5
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 576000
  MOMENTUM: 0.9
  NESTEROV: false
  OPTIMIZER: ADAMW
  REFERENCE_WORLD_SIZE: 0
  STEPS:
  - 60000
  - 80000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: 0.05
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[32m[11/07 16:28:45 detectron2]: [0mFull config saved to ./results/COCO/dh/dh_r50_fpn_COCO_concepts_cat/config.yaml
Loading pre-trained concepts embeddings. 
[32m[11/07 16:28:53 d2.engine.defaults]: [0mModel:
CATSS(
  (backbone): DyHead(
    (backbone): FPN(
      (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (top_block): LastLevelP6P7(
        (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (bottom_up): ResNet(
        (stem): BasicStem(
          (conv1): Conv2d(
            3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
        )
        (res2): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv1): Conv2d(
              64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
        )
        (res3): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv1): Conv2d(
              256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
        )
        (res4): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
            (conv1): Conv2d(
              512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (4): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (5): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
        )
        (res5): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
            (conv1): Conv2d(
              1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
        )
      )
    )
    (dyhead_tower): Sequential(
      (0): DyConv(
        (DyConv): ModuleList(
          (0): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (1): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (2): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=2, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
        )
        (AttnConv): Sequential(
          (0): AdaptiveAvgPool2d(output_size=1)
          (1): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
          (2): ReLU(inplace=True)
        )
        (h_sigmoid): h_sigmoid(
          (relu): ReLU6(inplace=True)
        )
        (relu): DYReLU(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=256, out_features=64, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=64, out_features=1024, bias=True)
            (3): h_sigmoid(
              (relu): ReLU6(inplace=True)
            )
          )
        )
        (offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (1): DyConv(
        (DyConv): ModuleList(
          (0): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (1): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (2): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=2, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
        )
        (AttnConv): Sequential(
          (0): AdaptiveAvgPool2d(output_size=1)
          (1): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
          (2): ReLU(inplace=True)
        )
        (h_sigmoid): h_sigmoid(
          (relu): ReLU6(inplace=True)
        )
        (relu): DYReLU(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=256, out_features=64, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=64, out_features=1024, bias=True)
            (3): h_sigmoid(
              (relu): ReLU6(inplace=True)
            )
          )
        )
        (offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (2): DyConv(
        (DyConv): ModuleList(
          (0): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (1): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (2): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=2, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
        )
        (AttnConv): Sequential(
          (0): AdaptiveAvgPool2d(output_size=1)
          (1): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
          (2): ReLU(inplace=True)
        )
        (h_sigmoid): h_sigmoid(
          (relu): ReLU6(inplace=True)
        )
        (relu): DYReLU(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=256, out_features=64, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=64, out_features=1024, bias=True)
            (3): h_sigmoid(
              (relu): ReLU6(inplace=True)
            )
          )
        )
        (offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (3): DyConv(
        (DyConv): ModuleList(
          (0): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (1): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (2): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=2, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
        )
        (AttnConv): Sequential(
          (0): AdaptiveAvgPool2d(output_size=1)
          (1): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
          (2): ReLU(inplace=True)
        )
        (h_sigmoid): h_sigmoid(
          (relu): ReLU6(inplace=True)
        )
        (relu): DYReLU(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=256, out_features=64, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=64, out_features=1024, bias=True)
            (3): h_sigmoid(
              (relu): ReLU6(inplace=True)
            )
          )
        )
        (offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (4): DyConv(
        (DyConv): ModuleList(
          (0): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (1): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (2): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=2, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
        )
        (AttnConv): Sequential(
          (0): AdaptiveAvgPool2d(output_size=1)
          (1): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
          (2): ReLU(inplace=True)
        )
        (h_sigmoid): h_sigmoid(
          (relu): ReLU6(inplace=True)
        )
        (relu): DYReLU(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=256, out_features=64, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=64, out_features=1024, bias=True)
            (3): h_sigmoid(
              (relu): ReLU6(inplace=True)
            )
          )
        )
        (offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (5): DyConv(
        (DyConv): ModuleList(
          (0): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (1): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (2): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=2, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
        )
        (AttnConv): Sequential(
          (0): AdaptiveAvgPool2d(output_size=1)
          (1): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
          (2): ReLU(inplace=True)
        )
        (h_sigmoid): h_sigmoid(
          (relu): ReLU6(inplace=True)
        )
        (relu): DYReLU(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=256, out_features=64, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=64, out_features=1024, bias=True)
            (3): h_sigmoid(
              (relu): ReLU6(inplace=True)
            )
          )
        )
        (offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  (head): CATSSHead(
    (cls_tower): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(32, 512, eps=1e-05, affine=True)
      (2): ReLU()
      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): GroupNorm(32, 512, eps=1e-05, affine=True)
      (5): ReLU()
    )
    (bbox_tower): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(32, 512, eps=1e-05, affine=True)
      (2): ReLU()
      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): GroupNorm(32, 512, eps=1e-05, affine=True)
      (5): ReLU()
    )
    (cls_logits): Conv2d(512, 80, kernel_size=(1, 1), stride=(1, 1))
    (bbox_pred): Conv2d(512, 4, kernel_size=(1, 1), stride=(1, 1))
    (centerness): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
    (scales): ModuleList(
      (0): Scale()
      (1): Scale()
      (2): Scale()
      (3): Scale()
      (4): Scale()
    )
  )
  (centerness_loss_func): BCEWithLogitsLoss()
  (classification_loss_func): SigmoidFocalLoss(gamma=2.0, alpha=0.25)
  (anchor_generator): DefaultAnchorGenerator(
    (cell_anchors): BufferList()
  )
  (concept_net): ConceptNet(
    (concept_vocab): Vocab()
    (concept_emb): Embedding(82116, 150)
    (deepset): _DeepSets(
      (mlp1): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=150, out_features=150, bias=True)
          (1): Linear(in_features=150, out_features=150, bias=True)
          (2): Linear(in_features=150, out_features=150, bias=True)
        )
      )
      (mlp2): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=150, out_features=150, bias=True)
          (1): Linear(in_features=150, out_features=256, bias=True)
        )
      )
    )
  )
)
[32m[11/07 16:28:53 fvcore.common.checkpoint]: [0m[Checkpointer] Loading from ./results/COCO/dh/dh_r50_fpn_COCO_concepts_cat/model_final.pth ...
Load concept for each category. 
[32m[11/07 16:28:57 d2.data.build]: [0mRemoved 48 images with no usable annotations. 4952 images left.
[32m[11/07 16:28:57 d2.data.build]: [0mDistribution of instances among all 80 categories:
[36m|   category    | #instances   |   category   | #instances   |   category    | #instances   |
|:-------------:|:-------------|:------------:|:-------------|:-------------:|:-------------|
|    person     | 7297         |   bicycle    | 208          |      car      | 1203         |
|  motorcycle   | 248          |   airplane   | 128          |      bus      | 186          |
|     train     | 149          |    truck     | 276          |     boat      | 325          |
| traffic light | 432          | fire hydrant | 80           |   stop sign   | 63           |
| parking meter | 34           |    bench     | 257          |     bird      | 314          |
|      cat      | 145          |     dog      | 165          |     horse     | 224          |
|     sheep     | 326          |     cow      | 318          |   elephant    | 229          |
|     bear      | 69           |    zebra     | 258          |    giraffe    | 217          |
|   backpack    | 227          |   umbrella   | 266          |    handbag    | 346          |
|      tie      | 145          |   suitcase   | 201          |    frisbee    | 85           |
|     skis      | 187          |  snowboard   | 46           |  sports ball  | 192          |
|     kite      | 210          | baseball bat | 107          | baseball gl.. | 102          |
|  skateboard   | 112          |  surfboard   | 196          | tennis racket | 160          |
|    bottle     | 613          |  wine glass  | 212          |      cup      | 537          |
|     fork      | 135          |    knife     | 184          |     spoon     | 166          |
|     bowl      | 374          |    banana    | 277          |     apple     | 147          |
|   sandwich    | 108          |    orange    | 164          |   broccoli    | 222          |
|    carrot     | 227          |   hot dog    | 88           |     pizza     | 193          |
|     donut     | 198          |     cake     | 224          |     chair     | 1078         |
|     couch     | 152          | potted plant | 222          |      bed      | 109          |
| dining table  | 428          |    toilet    | 142          |      tv       | 175          |
|    laptop     | 152          |    mouse     | 64           |    remote     | 176          |
|   keyboard    | 92           |  cell phone  | 165          |   microwave   | 32           |
|     oven      | 96           |   toaster    | 5            |     sink      | 151          |
| refrigerator  | 89           |     book     | 639          |     clock     | 193          |
|     vase      | 191          |   scissors   | 25           |  teddy bear   | 127          |
|  hair drier   | 7            |  toothbrush  | 28           |               |              |
|     total     | 24340        |              |              |               |              |[0m
[32m[11/07 16:28:57 d2.data.common]: [0mSerializing 4952 elements to byte tensors and concatenating them all ...
[32m[11/07 16:28:57 d2.data.common]: [0mSerialized dataset takes 14.12 MiB
[5m[31mWARNING[0m [32m[11/07 16:28:57 d2.evaluation.coco_evaluation]: [0mCOCO Evaluator instantiated using config, this is deprecated behavior. Please pass in explicit arguments instead.
[32m[11/07 16:28:57 d2.evaluation.evaluator]: [0mStart inference on 4952 batches
/ceph/hpc/home/eudavider/.local/lib/python3.9/site-packages/detectron2/structures/image_list.py:88: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  max_size = (max_size + (stride - 1)) // stride * stride
/ceph/hpc/home/eudavider/.conda/envs/dynamicHead/lib/python3.9/site-packages/torch/nn/functional.py:3847: UserWarning: nn.functional.upsample_bilinear is deprecated. Use nn.functional.interpolate instead.
  warnings.warn("nn.functional.upsample_bilinear is deprecated. Use nn.functional.interpolate instead.")
/ceph/hpc/home/eudavider/.conda/envs/dynamicHead/lib/python3.9/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  /opt/conda/conda-bld/pytorch_1634272164809/work/aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[32m[11/07 16:29:00 d2.evaluation.evaluator]: [0mInference done 11/4952. Dataloading: 0.0017 s/iter. Inference: 0.0693 s/iter. Eval: 0.0002 s/iter. Total: 0.0713 s/iter. ETA=0:05:52
[32m[11/07 16:29:05 d2.evaluation.evaluator]: [0mInference done 79/4952. Dataloading: 0.0013 s/iter. Inference: 0.0714 s/iter. Eval: 0.0002 s/iter. Total: 0.0737 s/iter. ETA=0:05:59
[32m[11/07 16:29:10 d2.evaluation.evaluator]: [0mInference done 147/4952. Dataloading: 0.0013 s/iter. Inference: 0.0714 s/iter. Eval: 0.0002 s/iter. Total: 0.0738 s/iter. ETA=0:05:54
[32m[11/07 16:29:15 d2.evaluation.evaluator]: [0mInference done 216/4952. Dataloading: 0.0014 s/iter. Inference: 0.0712 s/iter. Eval: 0.0002 s/iter. Total: 0.0737 s/iter. ETA=0:05:48
[32m[11/07 16:29:20 d2.evaluation.evaluator]: [0mInference done 285/4952. Dataloading: 0.0014 s/iter. Inference: 0.0709 s/iter. Eval: 0.0002 s/iter. Total: 0.0734 s/iter. ETA=0:05:42
[32m[11/07 16:29:25 d2.evaluation.evaluator]: [0mInference done 353/4952. Dataloading: 0.0014 s/iter. Inference: 0.0711 s/iter. Eval: 0.0002 s/iter. Total: 0.0736 s/iter. ETA=0:05:38
[32m[11/07 16:29:30 d2.evaluation.evaluator]: [0mInference done 422/4952. Dataloading: 0.0014 s/iter. Inference: 0.0711 s/iter. Eval: 0.0002 s/iter. Total: 0.0735 s/iter. ETA=0:05:33
[32m[11/07 16:29:35 d2.evaluation.evaluator]: [0mInference done 487/4952. Dataloading: 0.0014 s/iter. Inference: 0.0716 s/iter. Eval: 0.0002 s/iter. Total: 0.0741 s/iter. ETA=0:05:30
[32m[11/07 16:29:40 d2.evaluation.evaluator]: [0mInference done 556/4952. Dataloading: 0.0014 s/iter. Inference: 0.0715 s/iter. Eval: 0.0002 s/iter. Total: 0.0739 s/iter. ETA=0:05:24
[32m[11/07 16:29:45 d2.evaluation.evaluator]: [0mInference done 625/4952. Dataloading: 0.0014 s/iter. Inference: 0.0714 s/iter. Eval: 0.0002 s/iter. Total: 0.0738 s/iter. ETA=0:05:19
[32m[11/07 16:29:50 d2.evaluation.evaluator]: [0mInference done 691/4952. Dataloading: 0.0014 s/iter. Inference: 0.0716 s/iter. Eval: 0.0002 s/iter. Total: 0.0740 s/iter. ETA=0:05:15
[32m[11/07 16:29:55 d2.evaluation.evaluator]: [0mInference done 759/4952. Dataloading: 0.0014 s/iter. Inference: 0.0716 s/iter. Eval: 0.0002 s/iter. Total: 0.0741 s/iter. ETA=0:05:10
[32m[11/07 16:30:00 d2.evaluation.evaluator]: [0mInference done 827/4952. Dataloading: 0.0014 s/iter. Inference: 0.0715 s/iter. Eval: 0.0002 s/iter. Total: 0.0740 s/iter. ETA=0:05:05
[32m[11/07 16:30:05 d2.evaluation.evaluator]: [0mInference done 892/4952. Dataloading: 0.0014 s/iter. Inference: 0.0718 s/iter. Eval: 0.0002 s/iter. Total: 0.0743 s/iter. ETA=0:05:01
[32m[11/07 16:30:10 d2.evaluation.evaluator]: [0mInference done 961/4952. Dataloading: 0.0014 s/iter. Inference: 0.0717 s/iter. Eval: 0.0002 s/iter. Total: 0.0742 s/iter. ETA=0:04:56
[32m[11/07 16:30:15 d2.evaluation.evaluator]: [0mInference done 1028/4952. Dataloading: 0.0014 s/iter. Inference: 0.0718 s/iter. Eval: 0.0002 s/iter. Total: 0.0743 s/iter. ETA=0:04:51
[32m[11/07 16:30:21 d2.evaluation.evaluator]: [0mInference done 1095/4952. Dataloading: 0.0014 s/iter. Inference: 0.0719 s/iter. Eval: 0.0002 s/iter. Total: 0.0744 s/iter. ETA=0:04:46
[32m[11/07 16:30:26 d2.evaluation.evaluator]: [0mInference done 1159/4952. Dataloading: 0.0014 s/iter. Inference: 0.0721 s/iter. Eval: 0.0002 s/iter. Total: 0.0746 s/iter. ETA=0:04:43
[32m[11/07 16:30:31 d2.evaluation.evaluator]: [0mInference done 1224/4952. Dataloading: 0.0014 s/iter. Inference: 0.0723 s/iter. Eval: 0.0002 s/iter. Total: 0.0748 s/iter. ETA=0:04:38
[32m[11/07 16:30:36 d2.evaluation.evaluator]: [0mInference done 1292/4952. Dataloading: 0.0014 s/iter. Inference: 0.0722 s/iter. Eval: 0.0002 s/iter. Total: 0.0747 s/iter. ETA=0:04:33
[32m[11/07 16:30:41 d2.evaluation.evaluator]: [0mInference done 1358/4952. Dataloading: 0.0014 s/iter. Inference: 0.0723 s/iter. Eval: 0.0002 s/iter. Total: 0.0748 s/iter. ETA=0:04:28
[32m[11/07 16:30:46 d2.evaluation.evaluator]: [0mInference done 1426/4952. Dataloading: 0.0015 s/iter. Inference: 0.0723 s/iter. Eval: 0.0002 s/iter. Total: 0.0748 s/iter. ETA=0:04:23
[32m[11/07 16:30:51 d2.evaluation.evaluator]: [0mInference done 1493/4952. Dataloading: 0.0015 s/iter. Inference: 0.0723 s/iter. Eval: 0.0002 s/iter. Total: 0.0748 s/iter. ETA=0:04:18
[32m[11/07 16:30:56 d2.evaluation.evaluator]: [0mInference done 1558/4952. Dataloading: 0.0015 s/iter. Inference: 0.0724 s/iter. Eval: 0.0002 s/iter. Total: 0.0749 s/iter. ETA=0:04:14
[32m[11/07 16:31:01 d2.evaluation.evaluator]: [0mInference done 1626/4952. Dataloading: 0.0015 s/iter. Inference: 0.0724 s/iter. Eval: 0.0002 s/iter. Total: 0.0749 s/iter. ETA=0:04:09
[32m[11/07 16:31:06 d2.evaluation.evaluator]: [0mInference done 1693/4952. Dataloading: 0.0015 s/iter. Inference: 0.0724 s/iter. Eval: 0.0002 s/iter. Total: 0.0749 s/iter. ETA=0:04:04
[32m[11/07 16:31:11 d2.evaluation.evaluator]: [0mInference done 1760/4952. Dataloading: 0.0015 s/iter. Inference: 0.0724 s/iter. Eval: 0.0002 s/iter. Total: 0.0749 s/iter. ETA=0:03:59
[32m[11/07 16:31:16 d2.evaluation.evaluator]: [0mInference done 1828/4952. Dataloading: 0.0015 s/iter. Inference: 0.0724 s/iter. Eval: 0.0002 s/iter. Total: 0.0749 s/iter. ETA=0:03:53
[32m[11/07 16:31:21 d2.evaluation.evaluator]: [0mInference done 1897/4952. Dataloading: 0.0015 s/iter. Inference: 0.0723 s/iter. Eval: 0.0002 s/iter. Total: 0.0748 s/iter. ETA=0:03:48
[32m[11/07 16:31:26 d2.evaluation.evaluator]: [0mInference done 1965/4952. Dataloading: 0.0015 s/iter. Inference: 0.0723 s/iter. Eval: 0.0002 s/iter. Total: 0.0748 s/iter. ETA=0:03:43
[32m[11/07 16:31:31 d2.evaluation.evaluator]: [0mInference done 2031/4952. Dataloading: 0.0015 s/iter. Inference: 0.0723 s/iter. Eval: 0.0002 s/iter. Total: 0.0748 s/iter. ETA=0:03:38
[32m[11/07 16:31:36 d2.evaluation.evaluator]: [0mInference done 2100/4952. Dataloading: 0.0015 s/iter. Inference: 0.0723 s/iter. Eval: 0.0002 s/iter. Total: 0.0748 s/iter. ETA=0:03:33
[32m[11/07 16:31:41 d2.evaluation.evaluator]: [0mInference done 2168/4952. Dataloading: 0.0015 s/iter. Inference: 0.0723 s/iter. Eval: 0.0002 s/iter. Total: 0.0748 s/iter. ETA=0:03:28
[32m[11/07 16:31:46 d2.evaluation.evaluator]: [0mInference done 2235/4952. Dataloading: 0.0015 s/iter. Inference: 0.0723 s/iter. Eval: 0.0002 s/iter. Total: 0.0748 s/iter. ETA=0:03:23
[32m[11/07 16:31:51 d2.evaluation.evaluator]: [0mInference done 2299/4952. Dataloading: 0.0015 s/iter. Inference: 0.0724 s/iter. Eval: 0.0002 s/iter. Total: 0.0749 s/iter. ETA=0:03:18
[32m[11/07 16:31:56 d2.evaluation.evaluator]: [0mInference done 2362/4952. Dataloading: 0.0015 s/iter. Inference: 0.0725 s/iter. Eval: 0.0002 s/iter. Total: 0.0750 s/iter. ETA=0:03:14
[32m[11/07 16:32:01 d2.evaluation.evaluator]: [0mInference done 2427/4952. Dataloading: 0.0015 s/iter. Inference: 0.0726 s/iter. Eval: 0.0002 s/iter. Total: 0.0751 s/iter. ETA=0:03:09
[32m[11/07 16:32:06 d2.evaluation.evaluator]: [0mInference done 2494/4952. Dataloading: 0.0015 s/iter. Inference: 0.0725 s/iter. Eval: 0.0002 s/iter. Total: 0.0751 s/iter. ETA=0:03:04
[32m[11/07 16:32:11 d2.evaluation.evaluator]: [0mInference done 2563/4952. Dataloading: 0.0015 s/iter. Inference: 0.0725 s/iter. Eval: 0.0002 s/iter. Total: 0.0750 s/iter. ETA=0:02:59
[32m[11/07 16:32:16 d2.evaluation.evaluator]: [0mInference done 2631/4952. Dataloading: 0.0015 s/iter. Inference: 0.0725 s/iter. Eval: 0.0002 s/iter. Total: 0.0750 s/iter. ETA=0:02:54
[32m[11/07 16:32:21 d2.evaluation.evaluator]: [0mInference done 2695/4952. Dataloading: 0.0015 s/iter. Inference: 0.0726 s/iter. Eval: 0.0002 s/iter. Total: 0.0751 s/iter. ETA=0:02:49
[32m[11/07 16:32:27 d2.evaluation.evaluator]: [0mInference done 2761/4952. Dataloading: 0.0015 s/iter. Inference: 0.0726 s/iter. Eval: 0.0002 s/iter. Total: 0.0751 s/iter. ETA=0:02:44
[32m[11/07 16:32:32 d2.evaluation.evaluator]: [0mInference done 2828/4952. Dataloading: 0.0015 s/iter. Inference: 0.0726 s/iter. Eval: 0.0002 s/iter. Total: 0.0751 s/iter. ETA=0:02:39
[32m[11/07 16:32:37 d2.evaluation.evaluator]: [0mInference done 2894/4952. Dataloading: 0.0015 s/iter. Inference: 0.0726 s/iter. Eval: 0.0002 s/iter. Total: 0.0752 s/iter. ETA=0:02:34
[32m[11/07 16:32:42 d2.evaluation.evaluator]: [0mInference done 2961/4952. Dataloading: 0.0015 s/iter. Inference: 0.0726 s/iter. Eval: 0.0002 s/iter. Total: 0.0752 s/iter. ETA=0:02:29
[32m[11/07 16:32:47 d2.evaluation.evaluator]: [0mInference done 3026/4952. Dataloading: 0.0015 s/iter. Inference: 0.0727 s/iter. Eval: 0.0002 s/iter. Total: 0.0752 s/iter. ETA=0:02:24
[32m[11/07 16:32:52 d2.evaluation.evaluator]: [0mInference done 3091/4952. Dataloading: 0.0015 s/iter. Inference: 0.0727 s/iter. Eval: 0.0002 s/iter. Total: 0.0753 s/iter. ETA=0:02:20
[32m[11/07 16:32:57 d2.evaluation.evaluator]: [0mInference done 3155/4952. Dataloading: 0.0015 s/iter. Inference: 0.0728 s/iter. Eval: 0.0002 s/iter. Total: 0.0753 s/iter. ETA=0:02:15
[32m[11/07 16:33:02 d2.evaluation.evaluator]: [0mInference done 3221/4952. Dataloading: 0.0015 s/iter. Inference: 0.0728 s/iter. Eval: 0.0002 s/iter. Total: 0.0754 s/iter. ETA=0:02:10
[32m[11/07 16:33:07 d2.evaluation.evaluator]: [0mInference done 3287/4952. Dataloading: 0.0015 s/iter. Inference: 0.0728 s/iter. Eval: 0.0002 s/iter. Total: 0.0754 s/iter. ETA=0:02:05
[32m[11/07 16:33:12 d2.evaluation.evaluator]: [0mInference done 3354/4952. Dataloading: 0.0015 s/iter. Inference: 0.0728 s/iter. Eval: 0.0002 s/iter. Total: 0.0754 s/iter. ETA=0:02:00
[32m[11/07 16:33:17 d2.evaluation.evaluator]: [0mInference done 3423/4952. Dataloading: 0.0015 s/iter. Inference: 0.0728 s/iter. Eval: 0.0002 s/iter. Total: 0.0753 s/iter. ETA=0:01:55
[32m[11/07 16:33:22 d2.evaluation.evaluator]: [0mInference done 3492/4952. Dataloading: 0.0015 s/iter. Inference: 0.0728 s/iter. Eval: 0.0002 s/iter. Total: 0.0753 s/iter. ETA=0:01:49
[32m[11/07 16:33:27 d2.evaluation.evaluator]: [0mInference done 3559/4952. Dataloading: 0.0015 s/iter. Inference: 0.0727 s/iter. Eval: 0.0002 s/iter. Total: 0.0753 s/iter. ETA=0:01:44
[32m[11/07 16:33:32 d2.evaluation.evaluator]: [0mInference done 3626/4952. Dataloading: 0.0015 s/iter. Inference: 0.0727 s/iter. Eval: 0.0002 s/iter. Total: 0.0753 s/iter. ETA=0:01:39
[32m[11/07 16:33:37 d2.evaluation.evaluator]: [0mInference done 3692/4952. Dataloading: 0.0015 s/iter. Inference: 0.0727 s/iter. Eval: 0.0002 s/iter. Total: 0.0753 s/iter. ETA=0:01:34
[32m[11/07 16:33:42 d2.evaluation.evaluator]: [0mInference done 3757/4952. Dataloading: 0.0015 s/iter. Inference: 0.0728 s/iter. Eval: 0.0002 s/iter. Total: 0.0753 s/iter. ETA=0:01:30
[32m[11/07 16:33:47 d2.evaluation.evaluator]: [0mInference done 3823/4952. Dataloading: 0.0015 s/iter. Inference: 0.0728 s/iter. Eval: 0.0002 s/iter. Total: 0.0754 s/iter. ETA=0:01:25
[32m[11/07 16:33:52 d2.evaluation.evaluator]: [0mInference done 3889/4952. Dataloading: 0.0015 s/iter. Inference: 0.0728 s/iter. Eval: 0.0002 s/iter. Total: 0.0754 s/iter. ETA=0:01:20
[32m[11/07 16:33:57 d2.evaluation.evaluator]: [0mInference done 3955/4952. Dataloading: 0.0015 s/iter. Inference: 0.0728 s/iter. Eval: 0.0002 s/iter. Total: 0.0754 s/iter. ETA=0:01:15
[32m[11/07 16:34:02 d2.evaluation.evaluator]: [0mInference done 4021/4952. Dataloading: 0.0015 s/iter. Inference: 0.0728 s/iter. Eval: 0.0002 s/iter. Total: 0.0754 s/iter. ETA=0:01:10
[32m[11/07 16:34:07 d2.evaluation.evaluator]: [0mInference done 4089/4952. Dataloading: 0.0015 s/iter. Inference: 0.0728 s/iter. Eval: 0.0002 s/iter. Total: 0.0754 s/iter. ETA=0:01:05
[32m[11/07 16:34:12 d2.evaluation.evaluator]: [0mInference done 4158/4952. Dataloading: 0.0015 s/iter. Inference: 0.0728 s/iter. Eval: 0.0002 s/iter. Total: 0.0754 s/iter. ETA=0:00:59
[32m[11/07 16:34:18 d2.evaluation.evaluator]: [0mInference done 4226/4952. Dataloading: 0.0015 s/iter. Inference: 0.0728 s/iter. Eval: 0.0002 s/iter. Total: 0.0754 s/iter. ETA=0:00:54
[32m[11/07 16:34:23 d2.evaluation.evaluator]: [0mInference done 4293/4952. Dataloading: 0.0015 s/iter. Inference: 0.0728 s/iter. Eval: 0.0002 s/iter. Total: 0.0753 s/iter. ETA=0:00:49
[32m[11/07 16:34:28 d2.evaluation.evaluator]: [0mInference done 4361/4952. Dataloading: 0.0015 s/iter. Inference: 0.0728 s/iter. Eval: 0.0002 s/iter. Total: 0.0753 s/iter. ETA=0:00:44
[32m[11/07 16:34:33 d2.evaluation.evaluator]: [0mInference done 4423/4952. Dataloading: 0.0015 s/iter. Inference: 0.0729 s/iter. Eval: 0.0002 s/iter. Total: 0.0754 s/iter. ETA=0:00:39
[32m[11/07 16:34:38 d2.evaluation.evaluator]: [0mInference done 4488/4952. Dataloading: 0.0015 s/iter. Inference: 0.0729 s/iter. Eval: 0.0002 s/iter. Total: 0.0754 s/iter. ETA=0:00:35
[32m[11/07 16:34:43 d2.evaluation.evaluator]: [0mInference done 4556/4952. Dataloading: 0.0015 s/iter. Inference: 0.0729 s/iter. Eval: 0.0002 s/iter. Total: 0.0754 s/iter. ETA=0:00:29
[32m[11/07 16:34:48 d2.evaluation.evaluator]: [0mInference done 4621/4952. Dataloading: 0.0015 s/iter. Inference: 0.0729 s/iter. Eval: 0.0002 s/iter. Total: 0.0755 s/iter. ETA=0:00:24
[32m[11/07 16:34:53 d2.evaluation.evaluator]: [0mInference done 4688/4952. Dataloading: 0.0015 s/iter. Inference: 0.0729 s/iter. Eval: 0.0002 s/iter. Total: 0.0755 s/iter. ETA=0:00:19
[32m[11/07 16:34:58 d2.evaluation.evaluator]: [0mInference done 4754/4952. Dataloading: 0.0015 s/iter. Inference: 0.0729 s/iter. Eval: 0.0002 s/iter. Total: 0.0755 s/iter. ETA=0:00:14
[32m[11/07 16:35:03 d2.evaluation.evaluator]: [0mInference done 4818/4952. Dataloading: 0.0015 s/iter. Inference: 0.0729 s/iter. Eval: 0.0002 s/iter. Total: 0.0755 s/iter. ETA=0:00:10
[32m[11/07 16:35:08 d2.evaluation.evaluator]: [0mInference done 4882/4952. Dataloading: 0.0015 s/iter. Inference: 0.0730 s/iter. Eval: 0.0002 s/iter. Total: 0.0756 s/iter. ETA=0:00:05
[32m[11/07 16:35:13 d2.evaluation.evaluator]: [0mInference done 4950/4952. Dataloading: 0.0015 s/iter. Inference: 0.0730 s/iter. Eval: 0.0002 s/iter. Total: 0.0756 s/iter. ETA=0:00:00
[32m[11/07 16:35:13 d2.evaluation.evaluator]: [0mTotal inference time: 0:06:13.953296 (0.075592 s / iter per device, on 1 devices)
[32m[11/07 16:35:14 d2.evaluation.evaluator]: [0mTotal inference pure compute time: 0:06:00 (0.072973 s / iter per device, on 1 devices)
[32m[11/07 16:35:15 d2.evaluation.coco_evaluation]: [0mPreparing results for COCO format ...
[32m[11/07 16:35:15 d2.evaluation.coco_evaluation]: [0mSaving results to ./results/COCO/dh/dh_r50_fpn_COCO_concepts_cat/inference/coco_instances_results.json
[32m[11/07 16:35:16 d2.evaluation.coco_evaluation]: [0mEvaluating predictions with official COCO API...
Loading and preparing results...
DONE (t=0.62s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=23.89s).
Accumulating evaluation results...
DONE (t=2.92s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.516
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.731
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.552
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.341
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.548
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.665
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.363
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.610
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.668
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.488
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.717
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.815
[32m[11/07 16:35:43 d2.evaluation.coco_evaluation]: [0mEvaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 51.606 | 73.121 | 55.238 | 34.142 | 54.802 | 66.510 |
[32m[11/07 16:35:43 d2.evaluation.coco_evaluation]: [0mPer-category bbox AP: 
| category      | AP     | category     | AP     | category       | AP     |
|:--------------|:-------|:-------------|:-------|:---------------|:-------|
| person        | 59.229 | bicycle      | 37.032 | car            | 50.789 |
| motorcycle    | 49.693 | airplane     | 73.207 | bus            | 74.901 |
| train         | 74.249 | truck        | 46.338 | boat           | 31.211 |
| traffic light | 31.819 | fire hydrant | 72.504 | stop sign      | 73.750 |
| parking meter | 65.319 | bench        | 36.203 | bird           | 45.583 |
| cat           | 73.576 | dog          | 71.346 | horse          | 63.876 |
| sheep         | 62.166 | cow          | 66.435 | elephant       | 71.536 |
| bear          | 81.622 | zebra        | 70.818 | giraffe        | 72.599 |
| backpack      | 25.122 | umbrella     | 52.178 | handbag        | 23.121 |
| tie           | 41.084 | suitcase     | 48.716 | frisbee        | 72.962 |
| skis          | 28.314 | snowboard    | 53.737 | sports ball    | 46.667 |
| kite          | 50.198 | baseball bat | 37.092 | baseball glove | 41.747 |
| skateboard    | 57.186 | surfboard    | 41.632 | tennis racket  | 48.846 |
| bottle        | 48.559 | wine glass   | 44.830 | cup            | 51.340 |
| fork          | 45.270 | knife        | 28.060 | spoon          | 24.419 |
| bowl          | 50.523 | banana       | 34.169 | apple          | 30.391 |
| sandwich      | 45.761 | orange       | 38.928 | broccoli       | 33.738 |
| carrot        | 36.954 | hot dog      | 50.356 | pizza          | 63.082 |
| donut         | 63.897 | cake         | 48.178 | chair          | 38.174 |
| couch         | 58.428 | potted plant | 35.268 | bed            | 57.909 |
| dining table  | 48.031 | toilet       | 66.730 | tv             | 59.831 |
| laptop        | 70.761 | mouse        | 62.313 | remote         | 43.685 |
| keyboard      | 58.332 | cell phone   | 49.411 | microwave      | 67.578 |
| oven          | 46.382 | toaster      | 76.158 | sink           | 43.892 |
| refrigerator  | 69.247 | book         | 19.664 | clock          | 55.177 |
| vase          | 50.615 | scissors     | 42.448 | teddy bear     | 59.532 |
| hair drier    | 35.959 | toothbrush   | 50.079 |                |        |
[32m[11/07 16:35:44 d2.evaluation.testing]: [0mcopypaste: Task: bbox
[32m[11/07 16:35:44 d2.evaluation.testing]: [0mcopypaste: AP,AP50,AP75,APs,APm,APl
[32m[11/07 16:35:44 d2.evaluation.testing]: [0mcopypaste: 51.6057,73.1213,55.2383,34.1416,54.8021,66.5095


Job done.
Date:  lun 7 nov 2022, 16.36.04, CET
