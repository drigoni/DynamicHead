
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
Date:  gio 6 ott 2022, 14.24.06, CEST
Directory:  /ceph/hpc/home/eudavider/repository/DynamicHead
Nodelist:  gn06
Number of nodes:  1
Ntasks per node:  1
NGPUs per node:  1
CUDA_VISIBLE_DEVICES:  0
TORCH_DEVICE_COUNT:  1
SLURM_MASTER_PORT:  11341
SLURM_MASTER_NODE:  gn06
SLURM_MASTER_ADDR:  gn06
SLURM_MASTER_URL:  tcp://gn06:11341
--------------------------------------------- 
MODEL_NUM_GPUS:  1
MODEL_NUM_MACHINES:  1
MODEL_BATCH_SIZE:  5
MODEL_MAX_ITER:  576000
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 

srun: error: WARNING: Multiple leaf switches contain nodes: gn[01-60]
[nltk_data] Downloading package omw-1.4 to
[nltk_data]     /ceph/hpc/home/eudavider/nltk_data...
[nltk_data]   Package omw-1.4 is already up-to-date!
[nltk_data] Downloading package wordnet to
[nltk_data]     /ceph/hpc/home/eudavider/nltk_data...
[nltk_data]   Package wordnet is already up-to-date!
Command Line Args: Namespace(config_file='./configs/COCO/frcnn/frcnn_r101_fpn_COCO_concepts_test_empty_add.yaml', resume=False, eval_only=True, num_gpus=1, num_machines=1, machine_rank=0, dist_url='tcp://gn06:11341', opts=['SOLVER.IMS_PER_BATCH', '5', 'SOLVER.MAX_ITER', '576000', 'DATASETS.TEST', '("coco_2017_val",)'])
[32m[10/06 14:24:34 detectron2]: [0mRank of current process: 0. World size: 1
[32m[10/06 14:24:36 detectron2]: [0mEnvironment info:
----------------------  ------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.13 | packaged by conda-forge | (main, May 27 2022, 16:56:21) [GCC 10.3.0]
numpy                   1.23.1
detectron2              0.6 @/ceph/hpc/home/eudavider/.local/lib/python3.9/site-packages/detectron2
Compiler                GCC 7.3
CUDA compiler           CUDA 11.3
detectron2 arch flags   3.7, 5.0, 5.2, 6.0, 6.1, 7.0, 7.5, 8.0, 8.6
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.10.0 @/ceph/hpc/home/eudavider/.conda/envs/dynamicHead/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   NVIDIA A100-SXM4-40GB (arch=8.0)
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.2.0
torchvision             0.11.0 @/ceph/hpc/home/eudavider/.conda/envs/dynamicHead/lib/python3.9/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     Not found
----------------------  ------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[32m[10/06 14:24:36 detectron2]: [0mCommand line arguments: Namespace(config_file='./configs/COCO/frcnn/frcnn_r101_fpn_COCO_concepts_test_empty_add.yaml', resume=False, eval_only=True, num_gpus=1, num_machines=1, machine_rank=0, dist_url='tcp://gn06:11341', opts=['SOLVER.IMS_PER_BATCH', '5', 'SOLVER.MAX_ITER', '576000', 'DATASETS.TEST', '("coco_2017_val",)'])
[32m[10/06 14:24:36 detectron2]: [0mContents of args.config_file=./configs/COCO/frcnn/frcnn_r101_fpn_COCO_concepts_test_empty_add.yaml:
_BASE_: "base_frcnn_COCO_concepts.yaml"
MODEL:
  WEIGHTS: "./results/COCO/frcnn/frcnn_r101_fpn_COCO_concepts_add/model_final.pth"
  MASK_ON: False
  RESNETS:
    DEPTH: 101
CONCEPT:
  CONCEPT_FUSION: "add" # ["cat", "mul", "add", "zeros"]
  APPLY_CONDITION: FALSE
  APPLY_CONDITION_FROM_FILE: FALSE
  ACTIVATE_CONCEPT_GENERATOR: FALSE
DATASETS:
  TRAIN: ("coco_2017_train",)
  TEST: ("coco_2017_val",)
  # TEST: ("coco_2017_val_subset",)
  # TEST: ("coco_2017_val_powerset",)
DEEPSETS:
  EMB: "random"
OUTPUT_DIR: "./results/COCO/frcnn/frcnn_r101_fpn_COCO_concepts_add/"
[32m[10/06 14:24:36 detectron2]: [0mRunning with full config:
CONCEPT:
  APPLY_CONDITION: false
  APPLY_CONDITION_FROM_FILE: false
  ACTIVATE_CONCEPT_GENERATOR: false
  CONCEPT_FUSION: add
  DEPTH: 3
  EXTERNAL_CONCEPTS_FOLDER: ./datasets/ewiser_concepts_COCO_valid/
  FILE: ./concept/coco_to_synset.json
  ONLY_NAME: true
  UNIQUE: true
  VOCAB: ./concept/vocab.json
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 32
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - coco_2017_val
  TRAIN:
  - coco_2017_train
DEEPSETS:
  AGGREGATE: sum
  EMB: random
  EMB_DIM: 150
  FILE: ./concept/wn30_holE_500_150_0.1_0.2_embeddings.pickle
  FREEZE: true
  MLP1_LAYERS: 2
  MLP2_LAYERS: 1
  OUTPUT_DIM: 256
EVALUATOR_TYPE: default
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
    - - 64
    - - 128
    - - 256
    - - 512
  ATSS:
    BBOX_REG_WEIGHTS:
    - 10.0
    - 10.0
    - 5.0
    - 5.0
    CHANNELS: 256
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    INFERENCE_TH: 0.05
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_TH: 0.6
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRE_NMS_TOP_N: 1000
    PRIOR_PROB: 0.01
    REG_LOSS_WEIGHT: 2.0
    TOPK: 9
    USE_GN: true
  BACKBONE:
    FREEZE_AT: -1
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  DYHEAD:
    CHANNELS: 256
    NUM_CONVS: 6
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: ConceptGeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 103.53
  - 116.28
  - 123.675
  PIXEL_STD:
  - 1.0
  - 1.0
  - 1.0
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 101
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: true
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    - p6
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  SWINT:
    APE: false
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.2
    EMBED_DIM: 96
    MLP_RATIO: 4
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - stage2
    - stage3
    - stage4
    - stage5
    OUT_NORM: true
    VERSION: 1
    WINDOW_SIZE: 7
  WEIGHTS: ./results/COCO/frcnn/frcnn_r101_fpn_COCO_concepts_add/model_final.pth
OUTPUT_DIR: ./results/COCO/frcnn/frcnn_r101_fpn_COCO_concepts_add/
SEED: 2022
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.0025
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 5
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 576000
  MOMENTUM: 0.9
  NESTEROV: false
  OPTIMIZER: SGD
  REFERENCE_WORLD_SIZE: 0
  STEPS:
  - 60000
  - 80000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[32m[10/06 14:24:36 detectron2]: [0mFull config saved to ./results/COCO/frcnn/frcnn_r101_fpn_COCO_concepts_add/config.yaml
Loading pre-trained concepts embeddings. 
[32m[10/06 14:24:40 d2.engine.defaults]: [0mModel:
ConceptGeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=81, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=320, bias=True)
    )
  )
  (concept_net): ConceptNet(
    (concept_vocab): Vocab()
    (concept_emb): Embedding(82116, 150)
    (deepset): _DeepSets(
      (mlp1): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=150, out_features=150, bias=True)
          (1): Linear(in_features=150, out_features=150, bias=True)
          (2): Linear(in_features=150, out_features=150, bias=True)
        )
      )
      (mlp2): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=150, out_features=150, bias=True)
          (1): Linear(in_features=150, out_features=256, bias=True)
        )
      )
    )
  )
)
[32m[10/06 14:24:40 fvcore.common.checkpoint]: [0m[Checkpointer] Loading from ./results/COCO/frcnn/frcnn_r101_fpn_COCO_concepts_add/model_final.pth ...
Load concept for each category. 
[32m[10/06 14:24:45 d2.data.datasets.coco]: [0mLoaded 5000 images in COCO format from datasets/coco/annotations/instances_val2017.json
[32m[10/06 14:24:45 d2.data.build]: [0mRemoved 48 images with no usable annotations. 4952 images left.
[32m[10/06 14:24:46 d2.data.build]: [0mDistribution of instances among all 80 categories:
[36m|   category    | #instances   |   category   | #instances   |   category    | #instances   |
|:-------------:|:-------------|:------------:|:-------------|:-------------:|:-------------|
|    person     | 10777        |   bicycle    | 314          |      car      | 1918         |
|  motorcycle   | 367          |   airplane   | 143          |      bus      | 283          |
|     train     | 190          |    truck     | 414          |     boat      | 424          |
| traffic light | 634          | fire hydrant | 101          |   stop sign   | 75           |
| parking meter | 60           |    bench     | 411          |     bird      | 427          |
|      cat      | 202          |     dog      | 218          |     horse     | 272          |
|     sheep     | 354          |     cow      | 372          |   elephant    | 252          |
|     bear      | 71           |    zebra     | 266          |    giraffe    | 232          |
|   backpack    | 371          |   umbrella   | 407          |    handbag    | 540          |
|      tie      | 252          |   suitcase   | 299          |    frisbee    | 115          |
|     skis      | 241          |  snowboard   | 69           |  sports ball  | 260          |
|     kite      | 327          | baseball bat | 145          | baseball gl.. | 148          |
|  skateboard   | 179          |  surfboard   | 267          | tennis racket | 225          |
|    bottle     | 1013         |  wine glass  | 341          |      cup      | 895          |
|     fork      | 215          |    knife     | 325          |     spoon     | 253          |
|     bowl      | 623          |    banana    | 370          |     apple     | 236          |
|   sandwich    | 177          |    orange    | 285          |   broccoli    | 312          |
|    carrot     | 365          |   hot dog    | 125          |     pizza     | 284          |
|     donut     | 328          |     cake     | 310          |     chair     | 1771         |
|     couch     | 261          | potted plant | 342          |      bed      | 163          |
| dining table  | 695          |    toilet    | 179          |      tv       | 288          |
|    laptop     | 231          |    mouse     | 106          |    remote     | 283          |
|   keyboard    | 153          |  cell phone  | 262          |   microwave   | 55           |
|     oven      | 143          |   toaster    | 9            |     sink      | 225          |
| refrigerator  | 126          |     book     | 1129         |     clock     | 267          |
|     vase      | 274          |   scissors   | 36           |  teddy bear   | 190          |
|  hair drier   | 11           |  toothbrush  | 57           |               |              |
|     total     | 36335        |              |              |               |              |[0m
[32m[10/06 14:24:46 d2.data.common]: [0mSerializing 4952 elements to byte tensors and concatenating them all ...
[32m[10/06 14:24:46 d2.data.common]: [0mSerialized dataset takes 19.09 MiB
[5m[31mWARNING[0m [32m[10/06 14:24:46 d2.evaluation.coco_evaluation]: [0mCOCO Evaluator instantiated using config, this is deprecated behavior. Please pass in explicit arguments instead.
[32m[10/06 14:24:47 d2.evaluation.evaluator]: [0mStart inference on 4952 batches
/ceph/hpc/home/eudavider/.local/lib/python3.9/site-packages/detectron2/structures/image_list.py:88: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  max_size = (max_size + (stride - 1)) // stride * stride
/ceph/hpc/home/eudavider/.conda/envs/dynamicHead/lib/python3.9/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  /opt/conda/conda-bld/pytorch_1634272164809/work/aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[32m[10/06 14:24:50 d2.evaluation.evaluator]: [0mInference done 11/4952. Dataloading: 0.0010 s/iter. Inference: 0.0773 s/iter. Eval: 0.0002 s/iter. Total: 0.0785 s/iter. ETA=0:06:27
[32m[10/06 14:24:55 d2.evaluation.evaluator]: [0mInference done 135/4952. Dataloading: 0.0015 s/iter. Inference: 0.0404 s/iter. Eval: 0.0002 s/iter. Total: 0.0423 s/iter. ETA=0:03:23
[32m[10/06 14:25:00 d2.evaluation.evaluator]: [0mInference done 245/4952. Dataloading: 0.0016 s/iter. Inference: 0.0418 s/iter. Eval: 0.0002 s/iter. Total: 0.0440 s/iter. ETA=0:03:26
[32m[10/06 14:25:05 d2.evaluation.evaluator]: [0mInference done 343/4952. Dataloading: 0.0017 s/iter. Inference: 0.0437 s/iter. Eval: 0.0002 s/iter. Total: 0.0461 s/iter. ETA=0:03:32
[32m[10/06 14:25:10 d2.evaluation.evaluator]: [0mInference done 433/4952. Dataloading: 0.0019 s/iter. Inference: 0.0456 s/iter. Eval: 0.0002 s/iter. Total: 0.0482 s/iter. ETA=0:03:37
[32m[10/06 14:25:15 d2.evaluation.evaluator]: [0mInference done 530/4952. Dataloading: 0.0019 s/iter. Inference: 0.0461 s/iter. Eval: 0.0002 s/iter. Total: 0.0489 s/iter. ETA=0:03:36
[32m[10/06 14:25:20 d2.evaluation.evaluator]: [0mInference done 627/4952. Dataloading: 0.0019 s/iter. Inference: 0.0466 s/iter. Eval: 0.0002 s/iter. Total: 0.0493 s/iter. ETA=0:03:33
[32m[10/06 14:25:25 d2.evaluation.evaluator]: [0mInference done 729/4952. Dataloading: 0.0024 s/iter. Inference: 0.0461 s/iter. Eval: 0.0002 s/iter. Total: 0.0493 s/iter. ETA=0:03:28
[32m[10/06 14:25:30 d2.evaluation.evaluator]: [0mInference done 848/4952. Dataloading: 0.0023 s/iter. Inference: 0.0450 s/iter. Eval: 0.0002 s/iter. Total: 0.0483 s/iter. ETA=0:03:18
[32m[10/06 14:25:35 d2.evaluation.evaluator]: [0mInference done 956/4952. Dataloading: 0.0023 s/iter. Inference: 0.0448 s/iter. Eval: 0.0002 s/iter. Total: 0.0480 s/iter. ETA=0:03:12
[32m[10/06 14:25:40 d2.evaluation.evaluator]: [0mInference done 1047/4952. Dataloading: 0.0022 s/iter. Inference: 0.0454 s/iter. Eval: 0.0002 s/iter. Total: 0.0487 s/iter. ETA=0:03:10
[32m[10/06 14:25:45 d2.evaluation.evaluator]: [0mInference done 1143/4952. Dataloading: 0.0022 s/iter. Inference: 0.0456 s/iter. Eval: 0.0002 s/iter. Total: 0.0490 s/iter. ETA=0:03:06
[32m[10/06 14:25:50 d2.evaluation.evaluator]: [0mInference done 1247/4952. Dataloading: 0.0022 s/iter. Inference: 0.0456 s/iter. Eval: 0.0002 s/iter. Total: 0.0489 s/iter. ETA=0:03:01
[32m[10/06 14:25:55 d2.evaluation.evaluator]: [0mInference done 1345/4952. Dataloading: 0.0022 s/iter. Inference: 0.0458 s/iter. Eval: 0.0002 s/iter. Total: 0.0491 s/iter. ETA=0:02:57
[32m[10/06 14:26:00 d2.evaluation.evaluator]: [0mInference done 1433/4952. Dataloading: 0.0022 s/iter. Inference: 0.0463 s/iter. Eval: 0.0002 s/iter. Total: 0.0496 s/iter. ETA=0:02:54
[32m[10/06 14:26:05 d2.evaluation.evaluator]: [0mInference done 1532/4952. Dataloading: 0.0022 s/iter. Inference: 0.0464 s/iter. Eval: 0.0002 s/iter. Total: 0.0497 s/iter. ETA=0:02:49
[32m[10/06 14:26:10 d2.evaluation.evaluator]: [0mInference done 1633/4952. Dataloading: 0.0021 s/iter. Inference: 0.0464 s/iter. Eval: 0.0002 s/iter. Total: 0.0497 s/iter. ETA=0:02:44
[32m[10/06 14:26:15 d2.evaluation.evaluator]: [0mInference done 1735/4952. Dataloading: 0.0021 s/iter. Inference: 0.0464 s/iter. Eval: 0.0002 s/iter. Total: 0.0497 s/iter. ETA=0:02:39
[32m[10/06 14:26:21 d2.evaluation.evaluator]: [0mInference done 1836/4952. Dataloading: 0.0021 s/iter. Inference: 0.0465 s/iter. Eval: 0.0002 s/iter. Total: 0.0497 s/iter. ETA=0:02:34
[32m[10/06 14:26:26 d2.evaluation.evaluator]: [0mInference done 1935/4952. Dataloading: 0.0021 s/iter. Inference: 0.0466 s/iter. Eval: 0.0002 s/iter. Total: 0.0497 s/iter. ETA=0:02:30
[32m[10/06 14:26:31 d2.evaluation.evaluator]: [0mInference done 2039/4952. Dataloading: 0.0021 s/iter. Inference: 0.0465 s/iter. Eval: 0.0002 s/iter. Total: 0.0496 s/iter. ETA=0:02:24
[32m[10/06 14:26:36 d2.evaluation.evaluator]: [0mInference done 2137/4952. Dataloading: 0.0021 s/iter. Inference: 0.0466 s/iter. Eval: 0.0002 s/iter. Total: 0.0497 s/iter. ETA=0:02:19
[32m[10/06 14:26:41 d2.evaluation.evaluator]: [0mInference done 2233/4952. Dataloading: 0.0021 s/iter. Inference: 0.0467 s/iter. Eval: 0.0002 s/iter. Total: 0.0498 s/iter. ETA=0:02:15
[32m[10/06 14:26:46 d2.evaluation.evaluator]: [0mInference done 2328/4952. Dataloading: 0.0021 s/iter. Inference: 0.0468 s/iter. Eval: 0.0002 s/iter. Total: 0.0500 s/iter. ETA=0:02:11
[32m[10/06 14:26:51 d2.evaluation.evaluator]: [0mInference done 2424/4952. Dataloading: 0.0021 s/iter. Inference: 0.0469 s/iter. Eval: 0.0002 s/iter. Total: 0.0501 s/iter. ETA=0:02:06
[32m[10/06 14:26:56 d2.evaluation.evaluator]: [0mInference done 2521/4952. Dataloading: 0.0021 s/iter. Inference: 0.0470 s/iter. Eval: 0.0002 s/iter. Total: 0.0501 s/iter. ETA=0:02:01
[32m[10/06 14:27:01 d2.evaluation.evaluator]: [0mInference done 2614/4952. Dataloading: 0.0021 s/iter. Inference: 0.0471 s/iter. Eval: 0.0002 s/iter. Total: 0.0503 s/iter. ETA=0:01:57
[32m[10/06 14:27:06 d2.evaluation.evaluator]: [0mInference done 2715/4952. Dataloading: 0.0021 s/iter. Inference: 0.0471 s/iter. Eval: 0.0002 s/iter. Total: 0.0502 s/iter. ETA=0:01:52
[32m[10/06 14:27:11 d2.evaluation.evaluator]: [0mInference done 2817/4952. Dataloading: 0.0020 s/iter. Inference: 0.0471 s/iter. Eval: 0.0002 s/iter. Total: 0.0502 s/iter. ETA=0:01:47
[32m[10/06 14:27:16 d2.evaluation.evaluator]: [0mInference done 2911/4952. Dataloading: 0.0020 s/iter. Inference: 0.0472 s/iter. Eval: 0.0002 s/iter. Total: 0.0503 s/iter. ETA=0:01:42
[32m[10/06 14:27:21 d2.evaluation.evaluator]: [0mInference done 3006/4952. Dataloading: 0.0020 s/iter. Inference: 0.0473 s/iter. Eval: 0.0002 s/iter. Total: 0.0504 s/iter. ETA=0:01:38
[32m[10/06 14:27:26 d2.evaluation.evaluator]: [0mInference done 3114/4952. Dataloading: 0.0020 s/iter. Inference: 0.0472 s/iter. Eval: 0.0002 s/iter. Total: 0.0503 s/iter. ETA=0:01:32
[32m[10/06 14:27:31 d2.evaluation.evaluator]: [0mInference done 3219/4952. Dataloading: 0.0020 s/iter. Inference: 0.0471 s/iter. Eval: 0.0002 s/iter. Total: 0.0502 s/iter. ETA=0:01:27
[32m[10/06 14:27:36 d2.evaluation.evaluator]: [0mInference done 3314/4952. Dataloading: 0.0020 s/iter. Inference: 0.0472 s/iter. Eval: 0.0002 s/iter. Total: 0.0503 s/iter. ETA=0:01:22
[32m[10/06 14:27:41 d2.evaluation.evaluator]: [0mInference done 3406/4952. Dataloading: 0.0020 s/iter. Inference: 0.0473 s/iter. Eval: 0.0002 s/iter. Total: 0.0504 s/iter. ETA=0:01:17
[32m[10/06 14:27:46 d2.evaluation.evaluator]: [0mInference done 3507/4952. Dataloading: 0.0020 s/iter. Inference: 0.0473 s/iter. Eval: 0.0002 s/iter. Total: 0.0504 s/iter. ETA=0:01:12
[32m[10/06 14:27:51 d2.evaluation.evaluator]: [0mInference done 3618/4952. Dataloading: 0.0020 s/iter. Inference: 0.0471 s/iter. Eval: 0.0002 s/iter. Total: 0.0502 s/iter. ETA=0:01:06
[32m[10/06 14:27:56 d2.evaluation.evaluator]: [0mInference done 3726/4952. Dataloading: 0.0020 s/iter. Inference: 0.0470 s/iter. Eval: 0.0002 s/iter. Total: 0.0501 s/iter. ETA=0:01:01
[32m[10/06 14:28:01 d2.evaluation.evaluator]: [0mInference done 3838/4952. Dataloading: 0.0020 s/iter. Inference: 0.0469 s/iter. Eval: 0.0002 s/iter. Total: 0.0500 s/iter. ETA=0:00:55
[32m[10/06 14:28:06 d2.evaluation.evaluator]: [0mInference done 3951/4952. Dataloading: 0.0020 s/iter. Inference: 0.0467 s/iter. Eval: 0.0002 s/iter. Total: 0.0498 s/iter. ETA=0:00:49
[32m[10/06 14:28:11 d2.evaluation.evaluator]: [0mInference done 4044/4952. Dataloading: 0.0020 s/iter. Inference: 0.0468 s/iter. Eval: 0.0002 s/iter. Total: 0.0499 s/iter. ETA=0:00:45
[32m[10/06 14:28:16 d2.evaluation.evaluator]: [0mInference done 4141/4952. Dataloading: 0.0020 s/iter. Inference: 0.0468 s/iter. Eval: 0.0002 s/iter. Total: 0.0499 s/iter. ETA=0:00:40
[32m[10/06 14:28:21 d2.evaluation.evaluator]: [0mInference done 4245/4952. Dataloading: 0.0020 s/iter. Inference: 0.0468 s/iter. Eval: 0.0002 s/iter. Total: 0.0499 s/iter. ETA=0:00:35
[32m[10/06 14:28:26 d2.evaluation.evaluator]: [0mInference done 4340/4952. Dataloading: 0.0020 s/iter. Inference: 0.0468 s/iter. Eval: 0.0002 s/iter. Total: 0.0500 s/iter. ETA=0:00:30
[32m[10/06 14:28:31 d2.evaluation.evaluator]: [0mInference done 4454/4952. Dataloading: 0.0020 s/iter. Inference: 0.0467 s/iter. Eval: 0.0002 s/iter. Total: 0.0498 s/iter. ETA=0:00:24
[32m[10/06 14:28:36 d2.evaluation.evaluator]: [0mInference done 4555/4952. Dataloading: 0.0020 s/iter. Inference: 0.0467 s/iter. Eval: 0.0002 s/iter. Total: 0.0498 s/iter. ETA=0:00:19
[32m[10/06 14:28:41 d2.evaluation.evaluator]: [0mInference done 4662/4952. Dataloading: 0.0020 s/iter. Inference: 0.0466 s/iter. Eval: 0.0002 s/iter. Total: 0.0498 s/iter. ETA=0:00:14
[32m[10/06 14:28:46 d2.evaluation.evaluator]: [0mInference done 4755/4952. Dataloading: 0.0020 s/iter. Inference: 0.0467 s/iter. Eval: 0.0002 s/iter. Total: 0.0498 s/iter. ETA=0:00:09
[32m[10/06 14:28:51 d2.evaluation.evaluator]: [0mInference done 4849/4952. Dataloading: 0.0020 s/iter. Inference: 0.0467 s/iter. Eval: 0.0002 s/iter. Total: 0.0499 s/iter. ETA=0:00:05
[32m[10/06 14:28:56 d2.evaluation.evaluator]: [0mTotal inference time: 0:04:06.309849 (0.049790 s / iter per device, on 1 devices)
[32m[10/06 14:28:56 d2.evaluation.evaluator]: [0mTotal inference pure compute time: 0:03:50 (0.046587 s / iter per device, on 1 devices)
[32m[10/06 14:28:57 d2.evaluation.coco_evaluation]: [0mPreparing results for COCO format ...
[32m[10/06 14:28:57 d2.evaluation.coco_evaluation]: [0mSaving results to ./results/COCO/frcnn/frcnn_r101_fpn_COCO_concepts_add/inference/coco_instances_results.json
[32m[10/06 14:28:58 d2.evaluation.coco_evaluation]: [0mEvaluating predictions with official COCO API...
Loading and preparing results...
DONE (t=0.45s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=22.97s).
Accumulating evaluation results...
DONE (t=3.77s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.338
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.550
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.362
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.190
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.376
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.436
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.292
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.462
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.485
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.295
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.526
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.622
[32m[10/06 14:29:25 d2.evaluation.coco_evaluation]: [0mEvaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 33.815 | 54.957 | 36.159 | 19.032 | 37.588 | 43.591 |
[32m[10/06 14:29:25 d2.evaluation.coco_evaluation]: [0mPer-category bbox AP: 
| category      | AP     | category     | AP     | category       | AP     |
|:--------------|:-------|:-------------|:-------|:---------------|:-------|
| person        | 49.622 | bicycle      | 26.637 | car            | 37.117 |
| motorcycle    | 35.866 | airplane     | 56.985 | bus            | 57.489 |
| train         | 52.731 | truck        | 27.904 | boat           | 20.731 |
| traffic light | 22.772 | fire hydrant | 63.136 | stop sign      | 59.521 |
| parking meter | 41.455 | bench        | 17.169 | bird           | 31.366 |
| cat           | 59.016 | dog          | 54.765 | horse          | 48.919 |
| sheep         | 44.223 | cow          | 49.243 | elephant       | 57.881 |
| bear          | 64.498 | zebra        | 60.706 | giraffe        | 60.856 |
| backpack      | 11.820 | umbrella     | 29.115 | handbag        | 8.922  |
| tie           | 24.780 | suitcase     | 25.875 | frisbee        | 55.697 |
| skis          | 16.001 | snowboard    | 24.813 | sports ball    | 44.654 |
| kite          | 35.051 | baseball bat | 17.048 | baseball glove | 28.967 |
| skateboard    | 39.770 | surfboard    | 28.730 | tennis racket  | 39.383 |
| bottle        | 33.060 | wine glass   | 27.785 | cup            | 34.966 |
| fork          | 20.668 | knife        | 10.417 | spoon          | 8.073  |
| bowl          | 34.277 | banana       | 18.168 | apple          | 16.318 |
| sandwich      | 27.430 | orange       | 27.613 | broccoli       | 19.994 |
| carrot        | 16.819 | hot dog      | 21.222 | pizza          | 45.143 |
| donut         | 38.357 | cake         | 27.709 | chair          | 19.496 |
| couch         | 32.762 | potted plant | 19.050 | bed            | 33.711 |
| dining table  | 20.466 | toilet       | 51.435 | tv             | 47.171 |
| laptop        | 48.301 | mouse        | 54.221 | remote         | 21.502 |
| keyboard      | 41.543 | cell phone   | 28.882 | microwave      | 49.195 |
| oven          | 23.510 | toaster      | 18.689 | sink           | 29.697 |
| refrigerator  | 40.966 | book         | 11.007 | clock          | 48.420 |
| vase          | 31.583 | scissors     | 18.088 | teddy bear     | 37.920 |
| hair drier    | 6.931  | toothbrush   | 11.431 |                |        |
[32m[10/06 14:29:26 d2.evaluation.testing]: [0mcopypaste: Task: bbox
[32m[10/06 14:29:26 d2.evaluation.testing]: [0mcopypaste: AP,AP50,AP75,APs,APm,APl
[32m[10/06 14:29:26 d2.evaluation.testing]: [0mcopypaste: 33.8153,54.9572,36.1592,19.0323,37.5876,43.5913


Job done.
Date:  gio 6 ott 2022, 14.30.13, CEST
