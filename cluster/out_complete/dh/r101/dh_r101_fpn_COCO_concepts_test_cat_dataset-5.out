
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
Date:  sab 5 nov 2022, 13.21.43, CET
Directory:  /ceph/hpc/home/eudavider/repository/DynamicHead
Nodelist:  login0006
Number of nodes:  1
Ntasks per node:  1
NGPUs per node:  1
CUDA_VISIBLE_DEVICES:  0
TORCH_DEVICE_COUNT:  1
SLURM_MASTER_PORT:  13879
SLURM_MASTER_NODE:  login0006
SLURM_MASTER_ADDR:  login0006
SLURM_MASTER_URL:  tcp://login0006:13879
--------------------------------------------- 
MODEL_NUM_GPUS:  1
MODEL_NUM_MACHINES:  1
MODEL_BATCH_SIZE:  5
MODEL_MAX_ITER:  576000
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 

srun: error: WARNING: Multiple leaf switches contain nodes: gn[01-60]
[nltk_data] Downloading package omw-1.4 to
[nltk_data]     /ceph/hpc/home/eudavider/nltk_data...
[nltk_data]   Package omw-1.4 is already up-to-date!
[nltk_data] Downloading package wordnet to
[nltk_data]     /ceph/hpc/home/eudavider/nltk_data...
[nltk_data]   Package wordnet is already up-to-date!
Loading config ./configs/COCO/dh/r101/../base_dh_COCO_concepts.yaml with yaml.unsafe_load. Your machine may be at risk if the file contains malicious content.
Command Line Args: Namespace(config_file='./configs/COCO/dh/r101/dh_r101_fpn_COCO_concepts_test_cat.yaml', resume=False, eval_only=True, num_gpus=1, num_machines=1, machine_rank=0, dist_url='tcp://login0006:13879', opts=['SOLVER.IMS_PER_BATCH', '5', 'SOLVER.MAX_ITER', '576000', 'DATASETS.TEST', '("coco_2017_val_subset_old",)', 'CONCEPT.APPLY_CONDITION', 'False', 'EVALUATOR_TYPE', 'default'])
[32m[11/05 13:24:22 detectron2]: [0mRank of current process: 0. World size: 1
[32m[11/05 13:24:23 detectron2]: [0mEnvironment info:
----------------------  ------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.13 | packaged by conda-forge | (main, May 27 2022, 16:56:21) [GCC 10.3.0]
numpy                   1.23.1
detectron2              0.6 @/ceph/hpc/home/eudavider/.local/lib/python3.9/site-packages/detectron2
Compiler                GCC 7.3
CUDA compiler           CUDA 11.3
detectron2 arch flags   3.7, 5.0, 5.2, 6.0, 6.1, 7.0, 7.5, 8.0, 8.6
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.10.0 @/ceph/hpc/home/eudavider/.conda/envs/dynamicHead/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   NVIDIA A100-PCIE-40GB (arch=8.0)
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.2.0
torchvision             0.11.0 @/ceph/hpc/home/eudavider/.conda/envs/dynamicHead/lib/python3.9/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     Not found
----------------------  ------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[32m[11/05 13:24:23 detectron2]: [0mCommand line arguments: Namespace(config_file='./configs/COCO/dh/r101/dh_r101_fpn_COCO_concepts_test_cat.yaml', resume=False, eval_only=True, num_gpus=1, num_machines=1, machine_rank=0, dist_url='tcp://login0006:13879', opts=['SOLVER.IMS_PER_BATCH', '5', 'SOLVER.MAX_ITER', '576000', 'DATASETS.TEST', '("coco_2017_val_subset_old",)', 'CONCEPT.APPLY_CONDITION', 'False', 'EVALUATOR_TYPE', 'default'])
[32m[11/05 13:24:23 detectron2]: [0mContents of args.config_file=./configs/COCO/dh/r101/dh_r101_fpn_COCO_concepts_test_cat.yaml:
_BASE_: "../base_dh_COCO_concepts.yaml"
MODEL:
  WEIGHTS: "./results/COCO/dh/dh_r101_fpn_COCO_concepts_cat/model_final.pth"
  BACKBONE:
    NAME: "build_retinanet_resnet_fpn_dyhead_backbone"
  RESNETS:
    DEPTH: 101
    OUT_FEATURES: ["res3", "res4", "res5"]
  FPN:
    IN_FEATURES: ["res3", "res4", "res5"]
  ATSS:
    NUM_CONVS: 2
CONCEPT:
  CONCEPT_FUSION: "cat" # ["cat", "mul", "add", "zeros"]
  APPLY_CONDITION: TRUE
  APPLY_CONDITION_FROM_FILE: FALSE
  ACTIVATE_CONCEPT_GENERATOR: FALSE
DATASETS:
  TRAIN: ("coco_2017_tuning_train",)
  TEST: ("coco_2017_tuning_val",)
DEEPSETS:
  EMB: "random"
OUTPUT_DIR: "./results/COCO/dh/dh_r101_fpn_COCO_concepts_cat/"
[32m[11/05 13:24:23 detectron2]: [0mRunning with full config:
CONCEPT:
  ACTIVATE_CONCEPT_GENERATOR: false
  APPLY_CONDITION: false
  APPLY_CONDITION_FROM_FILE: false
  CONCEPT_FUSION: cat
  DEPTH: 1
  EXTERNAL_CONCEPTS_FOLDER: ./datasets/ewiser_concepts_COCO_valid/
  FILE: ./concept/coco_to_synset.json
  ONLY_NAME: true
  UNIQUE: true
  VOCAB: ./concept/vocab.json
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 16
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - coco_2017_val_subset_old
  TRAIN:
  - coco_2017_tuning_train
DEEPSETS:
  AGGREGATE: sum
  EMB: random
  EMB_DIM: 150
  FILE: ./concept/wn30_holE_500_150_0.1_0.2_embeddings.pickle
  FREEZE: true
  MLP1_LAYERS:
  - 150
  - 150
  MLP1_OUTPUT_DIM: 150
  MLP2_LAYERS:
  - 150
  OUTPUT_DIM: 256
EVALUATOR_TYPE: default
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - 1.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.5
    SIZES:
    - - 64
    - - 128
    - - 256
    - - 512
    - - 1024
  ATSS:
    BBOX_REG_WEIGHTS:
    - 10.0
    - 10.0
    - 5.0
    - 5.0
    CHANNELS: 256
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    INFERENCE_TH: 0.05
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_TH: 0.6
    NUM_CLASSES: 80
    NUM_CONVS: 2
    PRE_NMS_TOP_N: 1000
    PRIOR_PROB: 0.01
    REG_LOSS_WEIGHT: 2.0
    TOPK: 9
    USE_GN: true
  BACKBONE:
    FREEZE_AT: -1
    NAME: build_retinanet_resnet_fpn_dyhead_backbone
  DEVICE: cuda
  DYHEAD:
    CHANNELS: 256
    NUM_CONVS: 6
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES:
    - res3
    - res4
    - res5
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: CATSS
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 101
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: true
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  SWINT:
    APE: false
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.2
    EMBED_DIM: 96
    MLP_RATIO: 4
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - stage3
    - stage4
    - stage5
    OUT_NORM: true
    VERSION: 1
    WINDOW_SIZE: 7
  WEIGHTS: ./results/COCO/dh/dh_r101_fpn_COCO_concepts_cat/model_final.pth
OUTPUT_DIR: ./results/COCO/dh/dh_r101_fpn_COCO_concepts_cat/
SEED: 2022
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.0001
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 5
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 576000
  MOMENTUM: 0.9
  NESTEROV: false
  OPTIMIZER: ADAMW
  REFERENCE_WORLD_SIZE: 0
  STEPS:
  - 60000
  - 80000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: 0.05
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[32m[11/05 13:24:23 detectron2]: [0mFull config saved to ./results/COCO/dh/dh_r101_fpn_COCO_concepts_cat/config.yaml
Loading pre-trained concepts embeddings. 
[32m[11/05 13:24:31 d2.engine.defaults]: [0mModel:
CATSS(
  (backbone): DyHead(
    (backbone): FPN(
      (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (top_block): LastLevelP6P7(
        (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (bottom_up): ResNet(
        (stem): BasicStem(
          (conv1): Conv2d(
            3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
        )
        (res2): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv1): Conv2d(
              64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
        )
        (res3): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv1): Conv2d(
              256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
        )
        (res4): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
            (conv1): Conv2d(
              512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (4): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (5): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (6): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (7): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (8): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (9): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (10): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (11): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (12): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (13): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (14): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (15): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (16): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (17): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (18): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (19): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (20): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (21): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (22): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
        )
        (res5): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
            (conv1): Conv2d(
              1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
        )
      )
    )
    (dyhead_tower): Sequential(
      (0): DyConv(
        (DyConv): ModuleList(
          (0): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (1): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (2): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=2, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
        )
        (AttnConv): Sequential(
          (0): AdaptiveAvgPool2d(output_size=1)
          (1): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
          (2): ReLU(inplace=True)
        )
        (h_sigmoid): h_sigmoid(
          (relu): ReLU6(inplace=True)
        )
        (relu): DYReLU(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=256, out_features=64, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=64, out_features=1024, bias=True)
            (3): h_sigmoid(
              (relu): ReLU6(inplace=True)
            )
          )
        )
        (offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (1): DyConv(
        (DyConv): ModuleList(
          (0): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (1): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (2): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=2, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
        )
        (AttnConv): Sequential(
          (0): AdaptiveAvgPool2d(output_size=1)
          (1): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
          (2): ReLU(inplace=True)
        )
        (h_sigmoid): h_sigmoid(
          (relu): ReLU6(inplace=True)
        )
        (relu): DYReLU(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=256, out_features=64, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=64, out_features=1024, bias=True)
            (3): h_sigmoid(
              (relu): ReLU6(inplace=True)
            )
          )
        )
        (offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (2): DyConv(
        (DyConv): ModuleList(
          (0): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (1): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (2): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=2, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
        )
        (AttnConv): Sequential(
          (0): AdaptiveAvgPool2d(output_size=1)
          (1): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
          (2): ReLU(inplace=True)
        )
        (h_sigmoid): h_sigmoid(
          (relu): ReLU6(inplace=True)
        )
        (relu): DYReLU(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=256, out_features=64, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=64, out_features=1024, bias=True)
            (3): h_sigmoid(
              (relu): ReLU6(inplace=True)
            )
          )
        )
        (offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (3): DyConv(
        (DyConv): ModuleList(
          (0): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (1): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (2): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=2, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
        )
        (AttnConv): Sequential(
          (0): AdaptiveAvgPool2d(output_size=1)
          (1): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
          (2): ReLU(inplace=True)
        )
        (h_sigmoid): h_sigmoid(
          (relu): ReLU6(inplace=True)
        )
        (relu): DYReLU(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=256, out_features=64, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=64, out_features=1024, bias=True)
            (3): h_sigmoid(
              (relu): ReLU6(inplace=True)
            )
          )
        )
        (offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (4): DyConv(
        (DyConv): ModuleList(
          (0): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (1): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (2): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=2, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
        )
        (AttnConv): Sequential(
          (0): AdaptiveAvgPool2d(output_size=1)
          (1): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
          (2): ReLU(inplace=True)
        )
        (h_sigmoid): h_sigmoid(
          (relu): ReLU6(inplace=True)
        )
        (relu): DYReLU(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=256, out_features=64, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=64, out_features=1024, bias=True)
            (3): h_sigmoid(
              (relu): ReLU6(inplace=True)
            )
          )
        )
        (offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (5): DyConv(
        (DyConv): ModuleList(
          (0): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (1): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (2): Conv3x3Norm(
            (conv): ModulatedDeformConv(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=2, dilation=1, padding=1, groups=1, deformable_groups=1, bias=True)
            (bn): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
        )
        (AttnConv): Sequential(
          (0): AdaptiveAvgPool2d(output_size=1)
          (1): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
          (2): ReLU(inplace=True)
        )
        (h_sigmoid): h_sigmoid(
          (relu): ReLU6(inplace=True)
        )
        (relu): DYReLU(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=256, out_features=64, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=64, out_features=1024, bias=True)
            (3): h_sigmoid(
              (relu): ReLU6(inplace=True)
            )
          )
        )
        (offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  (head): CATSSHead(
    (cls_tower): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(32, 512, eps=1e-05, affine=True)
      (2): ReLU()
      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): GroupNorm(32, 512, eps=1e-05, affine=True)
      (5): ReLU()
    )
    (bbox_tower): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(32, 512, eps=1e-05, affine=True)
      (2): ReLU()
      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): GroupNorm(32, 512, eps=1e-05, affine=True)
      (5): ReLU()
    )
    (cls_logits): Conv2d(512, 80, kernel_size=(1, 1), stride=(1, 1))
    (bbox_pred): Conv2d(512, 4, kernel_size=(1, 1), stride=(1, 1))
    (centerness): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
    (scales): ModuleList(
      (0): Scale()
      (1): Scale()
      (2): Scale()
      (3): Scale()
      (4): Scale()
    )
  )
  (centerness_loss_func): BCEWithLogitsLoss()
  (classification_loss_func): SigmoidFocalLoss(gamma=2.0, alpha=0.25)
  (anchor_generator): DefaultAnchorGenerator(
    (cell_anchors): BufferList()
  )
  (concept_net): ConceptNet(
    (concept_vocab): Vocab()
    (concept_emb): Embedding(82116, 150)
    (deepset): _DeepSets(
      (mlp1): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=150, out_features=150, bias=True)
          (1): Linear(in_features=150, out_features=150, bias=True)
          (2): Linear(in_features=150, out_features=150, bias=True)
        )
      )
      (mlp2): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=150, out_features=150, bias=True)
          (1): Linear(in_features=150, out_features=256, bias=True)
        )
      )
    )
  )
)
[32m[11/05 13:24:31 fvcore.common.checkpoint]: [0m[Checkpointer] Loading from ./results/COCO/dh/dh_r101_fpn_COCO_concepts_cat/model_final.pth ...
Load concept for each category. 
[32m[11/05 13:24:35 d2.data.build]: [0mRemoved 48 images with no usable annotations. 4952 images left.
[32m[11/05 13:24:36 d2.data.build]: [0mDistribution of instances among all 80 categories:
[36m|   category    | #instances   |   category   | #instances   |   category    | #instances   |
|:-------------:|:-------------|:------------:|:-------------|:-------------:|:-------------|
|    person     | 7297         |   bicycle    | 208          |      car      | 1203         |
|  motorcycle   | 248          |   airplane   | 128          |      bus      | 186          |
|     train     | 149          |    truck     | 276          |     boat      | 325          |
| traffic light | 432          | fire hydrant | 80           |   stop sign   | 63           |
| parking meter | 34           |    bench     | 257          |     bird      | 314          |
|      cat      | 145          |     dog      | 165          |     horse     | 224          |
|     sheep     | 326          |     cow      | 318          |   elephant    | 229          |
|     bear      | 69           |    zebra     | 258          |    giraffe    | 217          |
|   backpack    | 227          |   umbrella   | 266          |    handbag    | 346          |
|      tie      | 145          |   suitcase   | 201          |    frisbee    | 85           |
|     skis      | 187          |  snowboard   | 46           |  sports ball  | 192          |
|     kite      | 210          | baseball bat | 107          | baseball gl.. | 102          |
|  skateboard   | 112          |  surfboard   | 196          | tennis racket | 160          |
|    bottle     | 613          |  wine glass  | 212          |      cup      | 537          |
|     fork      | 135          |    knife     | 184          |     spoon     | 166          |
|     bowl      | 374          |    banana    | 277          |     apple     | 147          |
|   sandwich    | 108          |    orange    | 164          |   broccoli    | 222          |
|    carrot     | 227          |   hot dog    | 88           |     pizza     | 193          |
|     donut     | 198          |     cake     | 224          |     chair     | 1078         |
|     couch     | 152          | potted plant | 222          |      bed      | 109          |
| dining table  | 428          |    toilet    | 142          |      tv       | 175          |
|    laptop     | 152          |    mouse     | 64           |    remote     | 176          |
|   keyboard    | 92           |  cell phone  | 165          |   microwave   | 32           |
|     oven      | 96           |   toaster    | 5            |     sink      | 151          |
| refrigerator  | 89           |     book     | 639          |     clock     | 193          |
|     vase      | 191          |   scissors   | 25           |  teddy bear   | 127          |
|  hair drier   | 7            |  toothbrush  | 28           |               |              |
|     total     | 24340        |              |              |               |              |[0m
[32m[11/05 13:24:36 d2.data.common]: [0mSerializing 4952 elements to byte tensors and concatenating them all ...
[32m[11/05 13:24:36 d2.data.common]: [0mSerialized dataset takes 14.12 MiB
[5m[31mWARNING[0m [32m[11/05 13:24:36 d2.evaluation.coco_evaluation]: [0mCOCO Evaluator instantiated using config, this is deprecated behavior. Please pass in explicit arguments instead.
[32m[11/05 13:24:37 d2.evaluation.evaluator]: [0mStart inference on 4952 batches
/ceph/hpc/home/eudavider/.local/lib/python3.9/site-packages/detectron2/structures/image_list.py:88: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  max_size = (max_size + (stride - 1)) // stride * stride
/ceph/hpc/home/eudavider/.conda/envs/dynamicHead/lib/python3.9/site-packages/torch/nn/functional.py:3847: UserWarning: nn.functional.upsample_bilinear is deprecated. Use nn.functional.interpolate instead.
  warnings.warn("nn.functional.upsample_bilinear is deprecated. Use nn.functional.interpolate instead.")
/ceph/hpc/home/eudavider/.conda/envs/dynamicHead/lib/python3.9/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  /opt/conda/conda-bld/pytorch_1634272164809/work/aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[32m[11/05 13:24:39 d2.evaluation.evaluator]: [0mInference done 11/4952. Dataloading: 0.0007 s/iter. Inference: 0.0784 s/iter. Eval: 0.0002 s/iter. Total: 0.0793 s/iter. ETA=0:06:31
[32m[11/05 13:24:45 d2.evaluation.evaluator]: [0mInference done 72/4952. Dataloading: 0.0012 s/iter. Inference: 0.0799 s/iter. Eval: 0.0002 s/iter. Total: 0.0823 s/iter. ETA=0:06:41
[32m[11/05 13:24:50 d2.evaluation.evaluator]: [0mInference done 130/4952. Dataloading: 0.0013 s/iter. Inference: 0.0814 s/iter. Eval: 0.0003 s/iter. Total: 0.0846 s/iter. ETA=0:06:47
[32m[11/05 13:24:55 d2.evaluation.evaluator]: [0mInference done 187/4952. Dataloading: 0.0013 s/iter. Inference: 0.0825 s/iter. Eval: 0.0003 s/iter. Total: 0.0858 s/iter. ETA=0:06:48
[32m[11/05 13:25:00 d2.evaluation.evaluator]: [0mInference done 246/4952. Dataloading: 0.0013 s/iter. Inference: 0.0824 s/iter. Eval: 0.0003 s/iter. Total: 0.0858 s/iter. ETA=0:06:43
[32m[11/05 13:25:05 d2.evaluation.evaluator]: [0mInference done 301/4952. Dataloading: 0.0013 s/iter. Inference: 0.0835 s/iter. Eval: 0.0003 s/iter. Total: 0.0868 s/iter. ETA=0:06:43
[32m[11/05 13:25:10 d2.evaluation.evaluator]: [0mInference done 360/4952. Dataloading: 0.0013 s/iter. Inference: 0.0832 s/iter. Eval: 0.0003 s/iter. Total: 0.0865 s/iter. ETA=0:06:37
[32m[11/05 13:25:15 d2.evaluation.evaluator]: [0mInference done 421/4952. Dataloading: 0.0013 s/iter. Inference: 0.0828 s/iter. Eval: 0.0003 s/iter. Total: 0.0860 s/iter. ETA=0:06:29
[32m[11/05 13:25:20 d2.evaluation.evaluator]: [0mInference done 480/4952. Dataloading: 0.0014 s/iter. Inference: 0.0826 s/iter. Eval: 0.0003 s/iter. Total: 0.0859 s/iter. ETA=0:06:24
[32m[11/05 13:25:25 d2.evaluation.evaluator]: [0mInference done 539/4952. Dataloading: 0.0014 s/iter. Inference: 0.0825 s/iter. Eval: 0.0003 s/iter. Total: 0.0859 s/iter. ETA=0:06:19
[32m[11/05 13:25:30 d2.evaluation.evaluator]: [0mInference done 596/4952. Dataloading: 0.0014 s/iter. Inference: 0.0826 s/iter. Eval: 0.0003 s/iter. Total: 0.0862 s/iter. ETA=0:06:15
[32m[11/05 13:25:35 d2.evaluation.evaluator]: [0mInference done 654/4952. Dataloading: 0.0014 s/iter. Inference: 0.0826 s/iter. Eval: 0.0003 s/iter. Total: 0.0862 s/iter. ETA=0:06:10
[32m[11/05 13:25:40 d2.evaluation.evaluator]: [0mInference done 715/4952. Dataloading: 0.0014 s/iter. Inference: 0.0824 s/iter. Eval: 0.0003 s/iter. Total: 0.0859 s/iter. ETA=0:06:03
[32m[11/05 13:25:45 d2.evaluation.evaluator]: [0mInference done 775/4952. Dataloading: 0.0014 s/iter. Inference: 0.0823 s/iter. Eval: 0.0003 s/iter. Total: 0.0857 s/iter. ETA=0:05:58
[32m[11/05 13:25:50 d2.evaluation.evaluator]: [0mInference done 833/4952. Dataloading: 0.0014 s/iter. Inference: 0.0824 s/iter. Eval: 0.0003 s/iter. Total: 0.0858 s/iter. ETA=0:05:53
[32m[11/05 13:25:55 d2.evaluation.evaluator]: [0mInference done 891/4952. Dataloading: 0.0014 s/iter. Inference: 0.0824 s/iter. Eval: 0.0003 s/iter. Total: 0.0859 s/iter. ETA=0:05:48
[32m[11/05 13:26:00 d2.evaluation.evaluator]: [0mInference done 950/4952. Dataloading: 0.0014 s/iter. Inference: 0.0823 s/iter. Eval: 0.0003 s/iter. Total: 0.0859 s/iter. ETA=0:05:43
[32m[11/05 13:26:05 d2.evaluation.evaluator]: [0mInference done 1009/4952. Dataloading: 0.0014 s/iter. Inference: 0.0823 s/iter. Eval: 0.0003 s/iter. Total: 0.0859 s/iter. ETA=0:05:38
[32m[11/05 13:26:10 d2.evaluation.evaluator]: [0mInference done 1065/4952. Dataloading: 0.0014 s/iter. Inference: 0.0825 s/iter. Eval: 0.0003 s/iter. Total: 0.0861 s/iter. ETA=0:05:34
[32m[11/05 13:26:15 d2.evaluation.evaluator]: [0mInference done 1122/4952. Dataloading: 0.0014 s/iter. Inference: 0.0825 s/iter. Eval: 0.0003 s/iter. Total: 0.0863 s/iter. ETA=0:05:30
[32m[11/05 13:26:20 d2.evaluation.evaluator]: [0mInference done 1179/4952. Dataloading: 0.0014 s/iter. Inference: 0.0826 s/iter. Eval: 0.0003 s/iter. Total: 0.0864 s/iter. ETA=0:05:25
[32m[11/05 13:26:25 d2.evaluation.evaluator]: [0mInference done 1233/4952. Dataloading: 0.0014 s/iter. Inference: 0.0829 s/iter. Eval: 0.0003 s/iter. Total: 0.0867 s/iter. ETA=0:05:22
[32m[11/05 13:26:31 d2.evaluation.evaluator]: [0mInference done 1289/4952. Dataloading: 0.0014 s/iter. Inference: 0.0831 s/iter. Eval: 0.0003 s/iter. Total: 0.0869 s/iter. ETA=0:05:18
[32m[11/05 13:26:36 d2.evaluation.evaluator]: [0mInference done 1346/4952. Dataloading: 0.0014 s/iter. Inference: 0.0832 s/iter. Eval: 0.0003 s/iter. Total: 0.0869 s/iter. ETA=0:05:13
[32m[11/05 13:26:41 d2.evaluation.evaluator]: [0mInference done 1403/4952. Dataloading: 0.0014 s/iter. Inference: 0.0832 s/iter. Eval: 0.0003 s/iter. Total: 0.0870 s/iter. ETA=0:05:08
[32m[11/05 13:26:46 d2.evaluation.evaluator]: [0mInference done 1460/4952. Dataloading: 0.0014 s/iter. Inference: 0.0831 s/iter. Eval: 0.0003 s/iter. Total: 0.0870 s/iter. ETA=0:05:03
[32m[11/05 13:26:51 d2.evaluation.evaluator]: [0mInference done 1516/4952. Dataloading: 0.0014 s/iter. Inference: 0.0833 s/iter. Eval: 0.0003 s/iter. Total: 0.0871 s/iter. ETA=0:04:59
[32m[11/05 13:26:56 d2.evaluation.evaluator]: [0mInference done 1574/4952. Dataloading: 0.0014 s/iter. Inference: 0.0833 s/iter. Eval: 0.0003 s/iter. Total: 0.0871 s/iter. ETA=0:04:54
[32m[11/05 13:27:01 d2.evaluation.evaluator]: [0mInference done 1631/4952. Dataloading: 0.0015 s/iter. Inference: 0.0834 s/iter. Eval: 0.0003 s/iter. Total: 0.0871 s/iter. ETA=0:04:49
[32m[11/05 13:27:06 d2.evaluation.evaluator]: [0mInference done 1690/4952. Dataloading: 0.0015 s/iter. Inference: 0.0833 s/iter. Eval: 0.0003 s/iter. Total: 0.0871 s/iter. ETA=0:04:43
[32m[11/05 13:27:11 d2.evaluation.evaluator]: [0mInference done 1749/4952. Dataloading: 0.0015 s/iter. Inference: 0.0832 s/iter. Eval: 0.0003 s/iter. Total: 0.0870 s/iter. ETA=0:04:38
[32m[11/05 13:27:16 d2.evaluation.evaluator]: [0mInference done 1810/4952. Dataloading: 0.0014 s/iter. Inference: 0.0831 s/iter. Eval: 0.0003 s/iter. Total: 0.0868 s/iter. ETA=0:04:32
[32m[11/05 13:27:21 d2.evaluation.evaluator]: [0mInference done 1868/4952. Dataloading: 0.0014 s/iter. Inference: 0.0831 s/iter. Eval: 0.0003 s/iter. Total: 0.0868 s/iter. ETA=0:04:27
[32m[11/05 13:27:26 d2.evaluation.evaluator]: [0mInference done 1925/4952. Dataloading: 0.0015 s/iter. Inference: 0.0831 s/iter. Eval: 0.0003 s/iter. Total: 0.0869 s/iter. ETA=0:04:23
[32m[11/05 13:27:31 d2.evaluation.evaluator]: [0mInference done 1982/4952. Dataloading: 0.0015 s/iter. Inference: 0.0831 s/iter. Eval: 0.0003 s/iter. Total: 0.0869 s/iter. ETA=0:04:18
[32m[11/05 13:27:36 d2.evaluation.evaluator]: [0mInference done 2039/4952. Dataloading: 0.0015 s/iter. Inference: 0.0832 s/iter. Eval: 0.0003 s/iter. Total: 0.0870 s/iter. ETA=0:04:13
[32m[11/05 13:27:41 d2.evaluation.evaluator]: [0mInference done 2098/4952. Dataloading: 0.0015 s/iter. Inference: 0.0831 s/iter. Eval: 0.0003 s/iter. Total: 0.0869 s/iter. ETA=0:04:08
[32m[11/05 13:27:46 d2.evaluation.evaluator]: [0mInference done 2155/4952. Dataloading: 0.0015 s/iter. Inference: 0.0832 s/iter. Eval: 0.0003 s/iter. Total: 0.0870 s/iter. ETA=0:04:03
[32m[11/05 13:27:51 d2.evaluation.evaluator]: [0mInference done 2209/4952. Dataloading: 0.0015 s/iter. Inference: 0.0834 s/iter. Eval: 0.0003 s/iter. Total: 0.0871 s/iter. ETA=0:03:59
[32m[11/05 13:27:56 d2.evaluation.evaluator]: [0mInference done 2261/4952. Dataloading: 0.0015 s/iter. Inference: 0.0835 s/iter. Eval: 0.0003 s/iter. Total: 0.0874 s/iter. ETA=0:03:55
[32m[11/05 13:28:01 d2.evaluation.evaluator]: [0mInference done 2319/4952. Dataloading: 0.0015 s/iter. Inference: 0.0834 s/iter. Eval: 0.0003 s/iter. Total: 0.0873 s/iter. ETA=0:03:49
[32m[11/05 13:28:06 d2.evaluation.evaluator]: [0mInference done 2378/4952. Dataloading: 0.0015 s/iter. Inference: 0.0834 s/iter. Eval: 0.0003 s/iter. Total: 0.0873 s/iter. ETA=0:03:44
[32m[11/05 13:28:11 d2.evaluation.evaluator]: [0mInference done 2433/4952. Dataloading: 0.0015 s/iter. Inference: 0.0835 s/iter. Eval: 0.0003 s/iter. Total: 0.0874 s/iter. ETA=0:03:40
[32m[11/05 13:28:16 d2.evaluation.evaluator]: [0mInference done 2488/4952. Dataloading: 0.0015 s/iter. Inference: 0.0836 s/iter. Eval: 0.0003 s/iter. Total: 0.0875 s/iter. ETA=0:03:35
[32m[11/05 13:28:21 d2.evaluation.evaluator]: [0mInference done 2546/4952. Dataloading: 0.0015 s/iter. Inference: 0.0836 s/iter. Eval: 0.0003 s/iter. Total: 0.0875 s/iter. ETA=0:03:30
[32m[11/05 13:28:26 d2.evaluation.evaluator]: [0mInference done 2603/4952. Dataloading: 0.0015 s/iter. Inference: 0.0837 s/iter. Eval: 0.0003 s/iter. Total: 0.0875 s/iter. ETA=0:03:25
[32m[11/05 13:28:31 d2.evaluation.evaluator]: [0mInference done 2660/4952. Dataloading: 0.0015 s/iter. Inference: 0.0837 s/iter. Eval: 0.0003 s/iter. Total: 0.0876 s/iter. ETA=0:03:20
[32m[11/05 13:28:36 d2.evaluation.evaluator]: [0mInference done 2718/4952. Dataloading: 0.0015 s/iter. Inference: 0.0837 s/iter. Eval: 0.0003 s/iter. Total: 0.0875 s/iter. ETA=0:03:15
[32m[11/05 13:28:42 d2.evaluation.evaluator]: [0mInference done 2775/4952. Dataloading: 0.0015 s/iter. Inference: 0.0837 s/iter. Eval: 0.0003 s/iter. Total: 0.0876 s/iter. ETA=0:03:10
[32m[11/05 13:28:47 d2.evaluation.evaluator]: [0mInference done 2833/4952. Dataloading: 0.0015 s/iter. Inference: 0.0837 s/iter. Eval: 0.0003 s/iter. Total: 0.0876 s/iter. ETA=0:03:05
[32m[11/05 13:28:52 d2.evaluation.evaluator]: [0mInference done 2888/4952. Dataloading: 0.0015 s/iter. Inference: 0.0837 s/iter. Eval: 0.0003 s/iter. Total: 0.0876 s/iter. ETA=0:03:00
[32m[11/05 13:28:57 d2.evaluation.evaluator]: [0mInference done 2942/4952. Dataloading: 0.0015 s/iter. Inference: 0.0838 s/iter. Eval: 0.0003 s/iter. Total: 0.0877 s/iter. ETA=0:02:56
[32m[11/05 13:29:02 d2.evaluation.evaluator]: [0mInference done 2998/4952. Dataloading: 0.0015 s/iter. Inference: 0.0839 s/iter. Eval: 0.0003 s/iter. Total: 0.0878 s/iter. ETA=0:02:51
[32m[11/05 13:29:07 d2.evaluation.evaluator]: [0mInference done 3055/4952. Dataloading: 0.0015 s/iter. Inference: 0.0839 s/iter. Eval: 0.0003 s/iter. Total: 0.0878 s/iter. ETA=0:02:46
[32m[11/05 13:29:12 d2.evaluation.evaluator]: [0mInference done 3114/4952. Dataloading: 0.0015 s/iter. Inference: 0.0839 s/iter. Eval: 0.0003 s/iter. Total: 0.0877 s/iter. ETA=0:02:41
[32m[11/05 13:29:17 d2.evaluation.evaluator]: [0mInference done 3173/4952. Dataloading: 0.0015 s/iter. Inference: 0.0839 s/iter. Eval: 0.0003 s/iter. Total: 0.0877 s/iter. ETA=0:02:36
[32m[11/05 13:29:22 d2.evaluation.evaluator]: [0mInference done 3230/4952. Dataloading: 0.0015 s/iter. Inference: 0.0839 s/iter. Eval: 0.0003 s/iter. Total: 0.0877 s/iter. ETA=0:02:31
[32m[11/05 13:29:27 d2.evaluation.evaluator]: [0mInference done 3289/4952. Dataloading: 0.0015 s/iter. Inference: 0.0838 s/iter. Eval: 0.0003 s/iter. Total: 0.0877 s/iter. ETA=0:02:25
[32m[11/05 13:29:32 d2.evaluation.evaluator]: [0mInference done 3347/4952. Dataloading: 0.0015 s/iter. Inference: 0.0838 s/iter. Eval: 0.0003 s/iter. Total: 0.0877 s/iter. ETA=0:02:20
[32m[11/05 13:29:37 d2.evaluation.evaluator]: [0mInference done 3405/4952. Dataloading: 0.0015 s/iter. Inference: 0.0838 s/iter. Eval: 0.0003 s/iter. Total: 0.0877 s/iter. ETA=0:02:15
[32m[11/05 13:29:42 d2.evaluation.evaluator]: [0mInference done 3466/4952. Dataloading: 0.0015 s/iter. Inference: 0.0837 s/iter. Eval: 0.0003 s/iter. Total: 0.0876 s/iter. ETA=0:02:10
[32m[11/05 13:29:47 d2.evaluation.evaluator]: [0mInference done 3523/4952. Dataloading: 0.0015 s/iter. Inference: 0.0837 s/iter. Eval: 0.0003 s/iter. Total: 0.0876 s/iter. ETA=0:02:05
[32m[11/05 13:29:52 d2.evaluation.evaluator]: [0mInference done 3579/4952. Dataloading: 0.0015 s/iter. Inference: 0.0838 s/iter. Eval: 0.0003 s/iter. Total: 0.0876 s/iter. ETA=0:02:00
[32m[11/05 13:29:57 d2.evaluation.evaluator]: [0mInference done 3636/4952. Dataloading: 0.0015 s/iter. Inference: 0.0838 s/iter. Eval: 0.0003 s/iter. Total: 0.0876 s/iter. ETA=0:01:55
[32m[11/05 13:30:02 d2.evaluation.evaluator]: [0mInference done 3692/4952. Dataloading: 0.0015 s/iter. Inference: 0.0838 s/iter. Eval: 0.0003 s/iter. Total: 0.0877 s/iter. ETA=0:01:50
[32m[11/05 13:30:07 d2.evaluation.evaluator]: [0mInference done 3745/4952. Dataloading: 0.0015 s/iter. Inference: 0.0838 s/iter. Eval: 0.0003 s/iter. Total: 0.0878 s/iter. ETA=0:01:45
[32m[11/05 13:30:12 d2.evaluation.evaluator]: [0mInference done 3805/4952. Dataloading: 0.0015 s/iter. Inference: 0.0838 s/iter. Eval: 0.0003 s/iter. Total: 0.0877 s/iter. ETA=0:01:40
[32m[11/05 13:30:17 d2.evaluation.evaluator]: [0mInference done 3860/4952. Dataloading: 0.0015 s/iter. Inference: 0.0838 s/iter. Eval: 0.0003 s/iter. Total: 0.0878 s/iter. ETA=0:01:35
[32m[11/05 13:30:22 d2.evaluation.evaluator]: [0mInference done 3918/4952. Dataloading: 0.0015 s/iter. Inference: 0.0838 s/iter. Eval: 0.0003 s/iter. Total: 0.0878 s/iter. ETA=0:01:30
[32m[11/05 13:30:27 d2.evaluation.evaluator]: [0mInference done 3975/4952. Dataloading: 0.0015 s/iter. Inference: 0.0838 s/iter. Eval: 0.0003 s/iter. Total: 0.0878 s/iter. ETA=0:01:25
[32m[11/05 13:30:32 d2.evaluation.evaluator]: [0mInference done 4027/4952. Dataloading: 0.0015 s/iter. Inference: 0.0839 s/iter. Eval: 0.0003 s/iter. Total: 0.0879 s/iter. ETA=0:01:21
[32m[11/05 13:30:38 d2.evaluation.evaluator]: [0mInference done 4086/4952. Dataloading: 0.0015 s/iter. Inference: 0.0839 s/iter. Eval: 0.0003 s/iter. Total: 0.0878 s/iter. ETA=0:01:16
[32m[11/05 13:30:43 d2.evaluation.evaluator]: [0mInference done 4145/4952. Dataloading: 0.0015 s/iter. Inference: 0.0838 s/iter. Eval: 0.0003 s/iter. Total: 0.0878 s/iter. ETA=0:01:10
[32m[11/05 13:30:48 d2.evaluation.evaluator]: [0mInference done 4199/4952. Dataloading: 0.0015 s/iter. Inference: 0.0839 s/iter. Eval: 0.0003 s/iter. Total: 0.0879 s/iter. ETA=0:01:06
[32m[11/05 13:30:53 d2.evaluation.evaluator]: [0mInference done 4254/4952. Dataloading: 0.0015 s/iter. Inference: 0.0840 s/iter. Eval: 0.0003 s/iter. Total: 0.0879 s/iter. ETA=0:01:01
[32m[11/05 13:30:58 d2.evaluation.evaluator]: [0mInference done 4306/4952. Dataloading: 0.0015 s/iter. Inference: 0.0840 s/iter. Eval: 0.0003 s/iter. Total: 0.0880 s/iter. ETA=0:00:56
[32m[11/05 13:31:03 d2.evaluation.evaluator]: [0mInference done 4362/4952. Dataloading: 0.0015 s/iter. Inference: 0.0840 s/iter. Eval: 0.0003 s/iter. Total: 0.0880 s/iter. ETA=0:00:51
[32m[11/05 13:31:08 d2.evaluation.evaluator]: [0mInference done 4418/4952. Dataloading: 0.0015 s/iter. Inference: 0.0841 s/iter. Eval: 0.0003 s/iter. Total: 0.0881 s/iter. ETA=0:00:47
[32m[11/05 13:31:13 d2.evaluation.evaluator]: [0mInference done 4472/4952. Dataloading: 0.0015 s/iter. Inference: 0.0841 s/iter. Eval: 0.0003 s/iter. Total: 0.0881 s/iter. ETA=0:00:42
[32m[11/05 13:31:18 d2.evaluation.evaluator]: [0mInference done 4528/4952. Dataloading: 0.0015 s/iter. Inference: 0.0842 s/iter. Eval: 0.0003 s/iter. Total: 0.0882 s/iter. ETA=0:00:37
[32m[11/05 13:31:23 d2.evaluation.evaluator]: [0mInference done 4582/4952. Dataloading: 0.0015 s/iter. Inference: 0.0842 s/iter. Eval: 0.0003 s/iter. Total: 0.0882 s/iter. ETA=0:00:32
[32m[11/05 13:31:28 d2.evaluation.evaluator]: [0mInference done 4641/4952. Dataloading: 0.0015 s/iter. Inference: 0.0842 s/iter. Eval: 0.0003 s/iter. Total: 0.0882 s/iter. ETA=0:00:27
[32m[11/05 13:31:33 d2.evaluation.evaluator]: [0mInference done 4694/4952. Dataloading: 0.0015 s/iter. Inference: 0.0843 s/iter. Eval: 0.0003 s/iter. Total: 0.0883 s/iter. ETA=0:00:22
[32m[11/05 13:31:38 d2.evaluation.evaluator]: [0mInference done 4752/4952. Dataloading: 0.0015 s/iter. Inference: 0.0843 s/iter. Eval: 0.0003 s/iter. Total: 0.0883 s/iter. ETA=0:00:17
[32m[11/05 13:31:43 d2.evaluation.evaluator]: [0mInference done 4810/4952. Dataloading: 0.0015 s/iter. Inference: 0.0842 s/iter. Eval: 0.0003 s/iter. Total: 0.0882 s/iter. ETA=0:00:12
[32m[11/05 13:31:48 d2.evaluation.evaluator]: [0mInference done 4865/4952. Dataloading: 0.0015 s/iter. Inference: 0.0843 s/iter. Eval: 0.0003 s/iter. Total: 0.0883 s/iter. ETA=0:00:07
[32m[11/05 13:31:53 d2.evaluation.evaluator]: [0mInference done 4925/4952. Dataloading: 0.0015 s/iter. Inference: 0.0842 s/iter. Eval: 0.0003 s/iter. Total: 0.0882 s/iter. ETA=0:00:02
[32m[11/05 13:31:56 d2.evaluation.evaluator]: [0mTotal inference time: 0:07:16.628165 (0.088261 s / iter per device, on 1 devices)
[32m[11/05 13:31:56 d2.evaluation.evaluator]: [0mTotal inference pure compute time: 0:06:56 (0.084208 s / iter per device, on 1 devices)
[32m[11/05 13:31:57 d2.evaluation.coco_evaluation]: [0mPreparing results for COCO format ...
[32m[11/05 13:31:58 d2.evaluation.coco_evaluation]: [0mSaving results to ./results/COCO/dh/dh_r101_fpn_COCO_concepts_cat/inference/coco_instances_results.json
[32m[11/05 13:32:00 d2.evaluation.coco_evaluation]: [0mEvaluating predictions with official COCO API...
Loading and preparing results...
DONE (t=1.35s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=27.14s).
Accumulating evaluation results...
DONE (t=6.75s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.333
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.456
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.363
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.228
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.371
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.431
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.362
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.594
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.631
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.415
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.678
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.784
[32m[11/05 13:32:35 d2.evaluation.coco_evaluation]: [0mEvaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 33.287 | 45.621 | 36.332 | 22.811 | 37.109 | 43.123 |
[32m[11/05 13:32:35 d2.evaluation.coco_evaluation]: [0mPer-category bbox AP: 
| category      | AP     | category     | AP     | category       | AP     |
|:--------------|:-------|:-------------|:-------|:---------------|:-------|
| person        | 38.745 | bicycle      | 25.229 | car            | 30.822 |
| motorcycle    | 36.201 | airplane     | 66.845 | bus            | 47.667 |
| train         | 54.636 | truck        | 24.366 | boat           | 21.880 |
| traffic light | 22.605 | fire hydrant | 56.588 | stop sign      | 66.971 |
| parking meter | 44.613 | bench        | 20.827 | bird           | 31.894 |
| cat           | 53.357 | dog          | 43.349 | horse          | 48.443 |
| sheep         | 55.007 | cow          | 54.594 | elephant       | 62.362 |
| bear          | 69.643 | zebra        | 69.894 | giraffe        | 71.339 |
| backpack      | 11.391 | umbrella     | 30.500 | handbag        | 11.705 |
| tie           | 26.837 | suitcase     | 32.348 | frisbee        | 54.338 |
| skis          | 19.504 | snowboard    | 32.093 | sports ball    | 29.748 |
| kite          | 37.590 | baseball bat | 16.304 | baseball glove | 26.447 |
| skateboard    | 39.752 | surfboard    | 29.742 | tennis racket  | 33.357 |
| bottle        | 24.802 | wine glass   | 25.587 | cup            | 29.523 |
| fork          | 29.348 | knife        | 11.112 | spoon          | 9.916  |
| bowl          | 24.275 | banana       | 21.164 | apple          | 15.395 |
| sandwich      | 16.932 | orange       | 14.867 | broccoli       | 21.172 |
| carrot        | 17.328 | hot dog      | 21.955 | pizza          | 32.517 |
| donut         | 34.925 | cake         | 23.993 | chair          | 19.987 |
| couch         | 31.619 | potted plant | 17.029 | bed            | 33.340 |
| dining table  | 20.895 | toilet       | 55.194 | tv             | 32.701 |
| laptop        | 45.594 | mouse        | 40.063 | remote         | 26.304 |
| keyboard      | 34.021 | cell phone   | 27.209 | microwave      | 47.369 |
| oven          | 26.984 | toaster      | 21.886 | sink           | 27.318 |
| refrigerator  | 44.004 | book         | 8.745  | clock          | 42.922 |
| vase          | 29.301 | scissors     | 26.989 | teddy bear     | 43.190 |
| hair drier    | 1.284  | toothbrush   | 34.668 |                |        |
[32m[11/05 13:32:36 d2.evaluation.testing]: [0mcopypaste: Task: bbox
[32m[11/05 13:32:36 d2.evaluation.testing]: [0mcopypaste: AP,AP50,AP75,APs,APm,APl
[32m[11/05 13:32:36 d2.evaluation.testing]: [0mcopypaste: 33.2870,45.6207,36.3317,22.8113,37.1090,43.1232


Job done.
Date:  sab 5 nov 2022, 13.32.57, CET
